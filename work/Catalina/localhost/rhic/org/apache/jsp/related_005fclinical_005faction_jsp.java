/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2016-01-02 11:05:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.hp.hpl.jena.rdf.model.ResIterator;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.RDFNode;
import java.util.ArrayList;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.io.File;
import java.util.Iterator;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import java.util.Properties;

public final class related_005fclinical_005faction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String getLabName(String labcode) {
        String ret = "-";

        if (labcode.equals("01")) {
            ret = "ตรวจน้ำตาลในเลือด จากหลอดเลือดดำ หลังอดอาหาร";
        } else if (labcode.equals("02")) {
            ret = "ตรวจน้ำตาลในเลือด จากหลอดเลือดดำ โดยไม่อดอาหาร";
        } else if (labcode.equals("03")) {
            ret = "ตรวจน้ำตาลในเลือด จากเส้นเลือดฝอย หลังอดอาหาร";
        } else if (labcode.equals("04")) {
            ret = "ตรวจน้ำตาลในเลือด จากเส้นเลือดฝอย โดยไม่อดอาหาร";
        } else if (labcode.equals("05")) {
            ret = "ตรวจ HbA1C";
        } else if (labcode.equals("06")) {
            ret = "ตรวจ Triglyceride";
        } else if (labcode.equals("07")) {
            ret = "ตรวจ Total Cholesterol";
        } else if (labcode.equals("08")) {
            ret = "ตรวจ HDL Cholesterol";
        } else if (labcode.equals("09")) {
            ret = "ตรวจ LDL Cholesterol";
        } else if (labcode.equals("10")) {
            ret = "ตรวจ BUN ในเลือด";
        } else if (labcode.equals("11")) {
            ret = "ตรวจ Creatinine ในเลือด";
        } else if (labcode.equals("12")) {
            ret = "ตรวจโปรตีน macroalbumin ในปัสสาวะ";
        } else if (labcode.equals("13")) {
            ret = "ตรวจโปรตีน microalbumin ในปัสสาวะ";
        } else if (labcode.equals("14")) {
            ret = "ตรวจหาค่า eGFR (สูตร CKD-EPI formular)";
        } else if (labcode.equals("15")) {
            ret = "ตรวจ Hb";
        } else if (labcode.equals("16")) {
            ret = "ตรวจ UPCR (Urine protien creatinine ratio)";
        } else if (labcode.equals("17")) {
            ret = "ตรวจ K (กรณี CKD stage 3 ขี้นไป หรือได้ยา ACEI//ARBs)";
        } else if (labcode.equals("18")) {
            ret = "ตรวจ Bicrab (กรณี CKD stage 3 ขึ้นไป)";
        } else if (labcode.equals("19")) {
            ret = "ตรวจ phosphate (กรณี CKD stage 3 ขึ้นไป)";
        } else if (labcode.equals("20")) {
            ret = "ตรวจ PTH (กรณี CKD stage 3 ขึ้นไป)";
        }

        return ret;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            Properties props = new Properties();
            props.load(getServletContext().getResourceAsStream("WEB-INF/config.properties"));
            OntModel mod = ModelFactory.createOntologyModel();
            mod.read("file:/" + props.getProperty("sidi_path") + "/data/" + request.getParameter("id") + ".owl");

            String ns = "http://202.28.94.50/ontologies/healthcare/hl7.owl#";
            Individual ind = mod.getIndividual(URLDecoder.decode(request.getParameter("ind")));
            RDFNode datend = ind.getPropertyValue(mod.getProperty(ns + "effective_date"));
            String dt = (datend != null) ? datend.asLiteral().getString() : "-";
            //NodeIterator its = ind.listPropertyValues(mod.getProperty(ns + "related_to"));
			ResIterator its = mod.listSubjectsWithProperty(mod.getProperty(ns + "effective_date"), datend);

            ArrayList<Individual> phyArr = new ArrayList<Individual>();
            ArrayList<Individual> diagArr = new ArrayList<Individual>();
            ArrayList<Individual> drugArr = new ArrayList<Individual>();
            ArrayList<Individual> labArr = new ArrayList<Individual>();
            ArrayList<Individual> vaccArr = new ArrayList<Individual>();
            ArrayList<Individual> pregArr = new ArrayList<Individual>();
            while (its.hasNext()) {
                RDFNode nd = its.next();
                if (nd.isResource()) {
                    Individual in = mod.getOntResource(nd.asResource()).asIndividual();
                    Iterator<Resource> inIts = in.listRDFTypes(true);
                    while (inIts.hasNext()) {
                        Resource r = inIts.next();
                        String nm = r.getLocalName();
                        if (nm.equals("Physical_Observation")) {
                            phyArr.add(in);
                        } else if (nm.equals("Diagnosis")) {
                            diagArr.add(in);
                        } else if (nm.equals("Drug_Prescription")) {
                            drugArr.add(in);
                        } else if (nm.equals("Laboratory")) {
                            labArr.add(in);
                        } else if (nm.equals("Vaccination")) {
                            vaccArr.add(in);
                        } else if (nm.equals("Pregnancy_Care")) {
                            pregArr.add(in);
                        }
                    }
                }
            }

        
      out.write("\n");
      out.write("        <h3 stype=\"margin:5px;text-align:center;\">Date : ");
      out.print(dt);
      out.write("</h3>\n");
      out.write("        ");
if (phyArr.size() > 0) {
      out.write("\n");
      out.write("        <h3 class=\"large\">Physical Examination</h3>\n");
      out.write("\t\t<table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>Weight (Kgs.)</th><th>Height (Cm.)</th><th>Blood Pressure</th><th>Activities</th></tr>\n");
      out.write("                    ");

                        int c = 0;
                        for (Individual i : phyArr) {
                            String w = "-", h = "-", bp = "-";
                            RDFNode nd1 = i.getPropertyResourceValue(mod.getProperty(ns + "found"));
                            if (nd1 != null) {
                                Statement stmt1 = nd1.asResource().getProperty(mod.getProperty(ns + "weight"));
                                Statement stmt2 = nd1.asResource().getProperty(mod.getProperty(ns + "height"));
                                Statement stmt3 = nd1.asResource().getProperty(mod.getProperty(ns + "blood_pressure"));
                                if (stmt1 != null) {
                                    w = stmt1.getObject().asLiteral().getString();
                                }
                                if (stmt2 != null) {
                                    h = stmt2.getObject().asLiteral().getString();
                                }
                                if (stmt3 != null) {
                                    bp = stmt3.getObject().asLiteral().getString();
                                }
                                c++;
                            }
                            Iterator<Resource> tps = i.listRDFTypes(true);
                            String types = "";
                            while (tps.hasNext()) {
                                Resource tres = tps.next();
								if(!tres.getLocalName().equals("Clinical_Action")&&!tres.getLocalName().equals("Physical_Observation")){
									types += (types.equals("")) ? tres.getLocalName() : "," + tres.getLocalName();
								}
                            }
                            out.println("<tr><td>" + c + "</td><td>" + w + "</td><td>" + h + "</td><td>" + bp + "</td><td>" + types + "</td></tr>");
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("        ");
if (diagArr.size() > 0) {
      out.write("\n");
      out.write("        <h3 class=\"large\">Diagnosis</h3>\n");
      out.write("\t\t<table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>ICD10 Diagnosis</th></tr>\n");
      out.write("                    ");

                        int c = 1;
                        for (Individual i : diagArr) {
                            RDFNode nd1 = i.getPropertyResourceValue(mod.getProperty(ns + "has_disease"));
                            if (nd1 != null) {
                                Statement stmt1 = nd1.asResource().getProperty(mod.getProperty(ns + "icd10_code"));
                                Statement stmt2 = nd1.asResource().getProperty(mod.getProperty(ns + "icd10_name"));
                                Statement stmt3 = nd1.asResource().getProperty(mod.getProperty(ns + "icd10_name_thai"));
                                out.print("<tr><td>" + c + "</td><td>");
                                if (stmt1 != null) {
                                    out.println("(" + stmt1.getObject().asLiteral().getString() + ") ");
                                }
                                if (stmt2 != null) {
                                    out.println(stmt2.getObject().asLiteral().getString());
                                }
                                if (stmt3 != null) {
                                    out.println("<br/>" + stmt3.getObject().asLiteral().getString());
                                }
                                out.print("</td></tr>");
                            } else {
                                out.println("<tr><td>" + c + "</td><td>-</td>");
                            }
                            c++;
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("        ");
if (drugArr.size() > 0) {
      out.write("\n");
      out.write("\t\t<h3 class=\"large\">Drug Prescription</h3>\n");
      out.write("        <table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>Drug Name</th><th>Amount</th></tr>\n");
      out.write("                    ");

                        int c = 1;
                        for (Individual i : drugArr) {
                            out.print("<tr><td>" + c + "</td><td>");
                            RDFNode nd1 = i.getPropertyResourceValue(mod.getProperty(ns + "to_drug"));
                            if (nd1 != null) {
                                Statement stmt2 = nd1.asResource().getProperty(mod.getProperty(ns + "item_name"));
                                Statement stmt3 = nd1.asResource().getProperty(mod.getProperty(ns + "item_name_thai"));
                                if (stmt2 != null) {
                                    out.println(stmt2.getObject().asLiteral().getString());
                                }
                                if (stmt3 != null) {
                                    out.println(" " + stmt3.getObject().asLiteral().getString());
                                }
                            }
                            out.print("</td>");
                            RDFNode nd3 = i.getPropertyValue(mod.getProperty(ns + "amount"));
                            String amt = (nd3 != null) ? nd3.asLiteral().getString() : "-";
                            out.println("<td>" + amt + "</td></tr>");
                            c++;
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("        ");
if (labArr.size() > 0) {
      out.write("\n");
      out.write("\t\t<h3 class=\"large\">Laboratory</h3>\n");
      out.write("        <table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>Lab. Type</th><th>Result</th></tr>\n");
      out.write("                    ");

                        int c = 1;
                        for (Individual i : labArr) {
                            out.print("<tr><td>" + c + "</td>");
                            RDFNode lab2 = i.getPropertyValue(mod.getProperty(ns + "lab_code"));
                            String labcode = (lab2 != null) ? lab2.asLiteral().getString() : "-";
                            RDFNode lab4 = i.getPropertyValue(mod.getProperty(ns + "lab_name"));
                            String labname = (lab4 != null) ? lab4.asLiteral().getString(): getLabName(labcode);
                            out.print("<td>" + labname + "</td>");
                            RDFNode lab3 = i.getPropertyValue(mod.getProperty(ns + "lab_result"));
                            String labres = (lab3 != null) ? lab3.asLiteral().getString() : "-";
                            out.println("<td>" + labres + "</td></tr>");
                            c++;
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("        ");
if (vaccArr.size() > 0) {
      out.write("<h3 class=\"large\">Vaccination</h3>\n");
      out.write("        <table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>Vaccine</th></tr>\n");
      out.write("                    ");

                        int c = 1;
                        for (Individual i : vaccArr) {
                            out.print("<tr><td>" + c + "</td><td>");
                            Resource vac2 = i.getPropertyResourceValue(mod.getProperty(ns + "to_vaccine"));
                            String vacname = "-", vacnameth = "-";
                            if (vac2 != null) {
                                com.hp.hpl.jena.rdf.model.Statement diag3 = vac2.asResource().getProperty(mod.getProperty(ns + "vaccine_name"));
                                if (diag3 != null) {
                                    vacname = diag3.getObject().asLiteral().getString();
                                }
                                com.hp.hpl.jena.rdf.model.Statement diag4 = vac2.asResource().getProperty(mod.getProperty(ns + "vaccine_name_thai"));
                                if (diag4 != null) {
                                    vacnameth = diag4.getObject().asLiteral().getString();
                                }
                            }
                            String vcc = (vacnameth.equals("")) ? vacname + " (" + vacnameth + ")" : vacname;
                            out.println(vcc + "</td></tr>");
                            c++;
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("        ");
if (pregArr.size() > 0) {
      out.write("\n");
      out.write("\t\t<h3 class=\"large\">Pregnancy Care</h3>\n");
      out.write("        <table style=\"display:block;\">\n");
      out.write("            <tr><th></th><th>Gravida No.</th><th>Gravida Age</th><th>Gravida Health</th></tr>\n");
      out.write("                    ");

                        int c = 1;
                        for (Individual i : pregArr) {
                            out.print("<tr><td>" + c + "</td>");
                            RDFNode preg2 = i.getPropertyValue(mod.getProperty(ns + "gravida_number"));
                            String gn = (preg2 != null) ? preg2.asLiteral().getString() : "-";
                            out.println("<td>" + gn + "</td>");
                            RDFNode preg3 = i.getPropertyValue(mod.getProperty(ns + "gravida_age"));
                            String ga = (preg3 != null) ? preg3.asLiteral().getString() : "-";
                            out.println("<td>" + ga + "</td>");
                            RDFNode preg4 = i.getPropertyValue(mod.getProperty(ns + "gravida_health"));
                            String gh = (preg4 != null) ? preg4.asLiteral().getString() : "-";
                            out.println("<td>" + gh + "</td>");
                            out.println("</tr>");
                            c++;
                        }
                    
      out.write(" \n");
      out.write("        </table>");
}
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
