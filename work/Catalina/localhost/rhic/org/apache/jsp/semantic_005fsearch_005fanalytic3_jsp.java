/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2016-02-03 08:56:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import h2s.BDecoder;
import java.util.Set;
import java.util.TreeMap;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.engine.binding.Binding;
import com.hp.hpl.jena.graph.Node;
import java.util.List;
import com.hp.hpl.jena.query.ResultSetFactory;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.URLEncoder;
import java.util.Properties;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.io.IOException;
import java.util.ArrayList;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Comparator;

public final class semantic_005fsearch_005fanalytic3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public TreeMap<String, Double> callBigdata(String fullsparql, Properties prop) throws IOException {

        String fullmsg = "query=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
        Socket sock = new Socket(prop.getProperty("rdf_host"), Integer.parseInt(prop.getProperty("rdf_port")));
        String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
                + "Host: " + prop.getProperty("rdf_host") + ":" + prop.getProperty("rdf_port") + "\r\n"
                + "Content-Length: " + fullmsg.length() + "\r\n"
                + "Content-Type: application/x-www-form-urlencoded\r\n"
                + "\r\n"
                + fullmsg;
        PrintWriter os = new PrintWriter(sock.getOutputStream());
        os.println(msg);
        os.flush();

        InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
        BufferedReader br = new BufferedReader(is);
        String outmsg = "";
        String line;
        while ((line = br.readLine()) != null) {
            outmsg += line;
        }

        os.close();
        is.close();
        sock.close();

		com.hp.hpl.jena.query.ResultSet results = ResultSetFactory.fromXML("<?xml version=" + outmsg.split("<?xml version=")[1]);

		TreeMap<String, Double> stats = new TreeMap<String, Double>();
		List<String> vars = results.getResultVars();
		double rcount = 0;
		if (results.hasNext()) {
			Binding bi = results.nextBinding();
			for (String v : vars) {
				Node obj = bi.get(Var.alloc(v));
				double vl = (obj != null) ? Double.parseDouble(obj.getLiteralLexicalForm()) : 0;
				stats.put(v, vl);
				rcount += vl;
			}
		}

        return stats;
    }


public SortedSet<Map.Entry<String,Double>> entriesSortedByValues(Map<String,Double> map) {
    SortedSet<Map.Entry<String,Double>> sortedEntries = new TreeSet<Map.Entry<String,Double>>(
        new Comparator<Map.Entry<String,Double>>() {
            @Override public int compare(Map.Entry<String,Double> e1, Map.Entry<String,Double> e2) {
                int res = e2.getValue().compareTo(e1.getValue());
                return res != 0 ? res : 1;
            }
        }
    );
    sortedEntries.addAll(map.entrySet());
    return sortedEntries;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");

	request.setCharacterEncoding("UTF-8");
	Properties props = new Properties();
	props.load(getServletContext().getResourceAsStream("WEB-INF/config.properties"));
	BDecoder decoder = new BDecoder();
	String fullsparql = "";
	String label = "";
	TreeMap<String, Double> stats = new TreeMap<String, Double>();
	TreeMap<String, Double> tstats = new TreeMap<String, Double>();
	ArrayList<String> summation = new ArrayList<String>();
	TreeMap<String,Double> comstats = new TreeMap<String, Double>();
	TreeMap<String,Double> ratiostats = new TreeMap<String, Double>();
	ArrayList<TreeMap> sumstatsArr = new ArrayList<TreeMap>();
	ArrayList<String> sumslabel = new ArrayList<String>();
	DecimalFormat dformat = new DecimalFormat("##.##");
	String mainlabel = "";
	String allsumlabel = "";
	String comlabel = "";
	String ratiolabel = "";
	String ratiolabel2 = "";
	String jsBarLbs = "var stackLbs = new Array();";

	if (request.getParameter("analytic_id") != null) {
		Class.forName("com.mysql.jdbc.Driver");
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + props.getProperty("db_name"), props.getProperty("db_user"), props.getProperty("db_pass"));
		Statement stmt = conn.createStatement();
		ResultSet res = stmt.executeQuery("select * from analytic where id='" + request.getParameter("analytic_id") + "'");
		if (res.next()) {
			stats = callBigdata(res.getString("sparql"),props);
			label = res.getString("label");
			mainlabel = res.getString("sparql_label");
			jsBarLbs += "stackLbs.push('"+mainlabel+"');";
			allsumlabel = res.getString("summation_label");
			
			if(res.getString("sparql_compare_order")!=null&&!res.getString("sparql_compare_order").equals("")){
				comstats = callBigdata(res.getString("sparql_compare_order"),props);
				comlabel = res.getString("sparql_compare_order_label");
			}

			if(res.getString("sparql_ratio")!=null&&!res.getString("sparql_ratio").equals("")){
				ratiostats = callBigdata(res.getString("sparql_ratio"),props);
				ratiolabel = res.getString("sparql_ratio_label");
				ratiolabel2 = res.getString("ratio_label");
			}
		}
		ResultSet res2 = stmt.executeQuery("select * from analytic_summation where analytic_id='"+request.getParameter("analytic_id")+"' order by id asc");
		if(res2!=null){
			while(res2.next()){
				sumstatsArr.add(callBigdata(res2.getString("sparql"),props));
				sumslabel.add(res2.getString("sparql_label"));
				jsBarLbs += "stackLbs.push('"+res2.getString("sparql_label")+"');";
			}
		}
	}

	ratiolabel2 = (ratiolabel2==null)?"Ratio (Total/"+ratiolabel+")" : ratiolabel2;


      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            table {background: gray;}\n");
      out.write("            th {background: lightgray;}\n");
      out.write("            td {background: white;}\n");
      out.write("            td,th {padding:5px;}\n");
      out.write("\t\t\th3 {width:100%;clear:left;border-bottom:1px solid gray;}\n");
      out.write("        </style>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.common.core.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.common.dynamic.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.common.tooltips.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.pie.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.bar.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph4.54/RGraph.line.js\" ></script>\n");
      out.write("\t\t<script src=\"jslibraries/RGraph4.54/RGraph.bipolar.js\"></script>\n");
      out.write("\t\t<script src=\"jslibraries/RGraph4.54/RGraph.hbar.js\"></script>\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");


            Set<String> keys = stats.keySet();
            String vrow = "";
            String cvalues = "";
            String clabels = "";
			String ctooltips = "";
            String bvalues = "";
            String blabels = "";
			String lbivalues = "";
			String rbivalues = "";
			double rcount = 0;
			double[] vtotal = new double[(1+sumstatsArr.size())];
			double vtotalcom = 0;
			double vtotalrat = 0;

			int c = 1;
			for (String k : keys) {
				String addCols = "";
				String addBvalues = "";
				double hsum = 0;
				vtotal[0] += stats.get(k);
				int sc = 1;
				for(TreeMap sums : sumstatsArr){
					double vsum = (sums.get(k)!=null)?(Double)sums.get(k):0;
					hsum += vsum;
					addCols += "<td>"+vsum+"</td>";
					addBvalues += ","+vsum;
					vtotal[sc] += vsum;
					sc++;
				}
				double subtotal = (stats.get(k)+hsum);
				tstats.put(k,subtotal);
				rcount += subtotal;
				double vcom = (comstats.get(k)!=null)?comstats.get(k):0;
				double vrat = (ratiostats.get(k)!=null)?ratiostats.get(k):0;
				vtotalcom += vcom;
				vtotalrat += vrat;
				String comstr = (comstats.size()>0)?"<td>"+vcom+"</td><td>"+(subtotal-vcom)+" ("+dformat.format(((subtotal-vcom)/vcom)*100)+"%)</td>":"";
				String vratStr = (vrat<subtotal)?dformat.format(subtotal/vrat) + " ("+ratiolabel+":"+allsumlabel+")":dformat.format(vrat/subtotal) + " ("+allsumlabel+":"+ratiolabel+")";
				String ratstr = (ratiostats.size()>0)?"<td>"+vrat+"</td><td>1 : "+vratStr+"</td>":"";
				vrow += (!addCols.equals(""))?"<tr><th>"+k+"</th><td>" + stats.get(k) + "</td>"+addCols+"<td>"+subtotal+"</td>"+comstr+ratstr+"</tr>":
					"<tr><th>"+k+"</th><td>" + stats.get(k) + "</td>"+comstr+ratstr+"</tr>";
				
				if(sumstatsArr.size()>0){
					blabels += (bvalues.equals("")) ? "'" + k + "'" : ",'" + k + "'";
					bvalues += (bvalues.equals("")) ? "["+stats.get(k)+addBvalues+"]" : ",[" + stats.get(k)+addBvalues+"]";
				}
				if(comstats.size()>0){
					rbivalues += (rbivalues.equals("")) ? comstats.get(k) : "," + comstats.get(k);
					lbivalues += (lbivalues.equals("")) ? subtotal : "," + subtotal;
				}

				c++;
			}

			if(sumstatsArr.size()>0){
				int cc = 1;
				cvalues += vtotal[0];
				ctooltips += "'" + mainlabel + ": " + vtotal[0] + " (" + dformat.format((vtotal[0]/rcount)*100.0d) + "%)'";
				for (String k : sumslabel) {
					double percentage = (vtotal[cc] / rcount) * 100.0d;
					cvalues += ","+ vtotal[cc];
					ctooltips += ",'" + k + ": " + vtotal[cc] + " (" + dformat.format(percentage) + "%)'";
					cc++;
				}
			}

			SortedSet<Map.Entry<String,Double>> lhbarM = entriesSortedByValues(tstats);
			String hbar1 = "";
			String hbar1v = "";
			for(Map.Entry<String,Double> k : lhbarM){
				hbar1 += (hbar1.equals(""))?"'"+k.getKey()+"'":",'"+k.getKey()+"'";
				hbar1v += (hbar1v.equals(""))?k.getValue():","+k.getValue();
			}
			SortedSet<Map.Entry<String,Double>> rhbarM = entriesSortedByValues(comstats);
			String hbar2 = "";
			String hbar2v = "";
			for(Map.Entry<String,Double> k : rhbarM){
				hbar2 += (hbar2.equals(""))?"'"+k.getKey()+"'":",'"+k.getKey()+"'";
				hbar2v += (hbar2v.equals(""))?k.getValue():","+k.getValue();
			}
		
      out.write("\n");
      out.write("        <h3>");
      out.print(label);
      out.write("</h3>\n");
      out.write("\t\t<!--<textarea style=\"width:100%;\">");
      out.print(fullsparql);
      out.write("</textarea>-->\n");
      out.write("        <table id=\"analytic_table\">\n");
      out.write("\t\t");
if(sumstatsArr.size()>0||comstats.size()>0||ratiostats.size()>0){
      out.write("\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<th rowspan=\"2\"></th>\n");
      out.write("\t\t\t\t");
      out.print((sumstatsArr.size()>0)?"<th colspan='"+(2+sumstatsArr.size())+"'>"+allsumlabel+"</th>":"<th rowspan='2'>"+allsumlabel+"</th>");
      out.write("\n");
      out.write("\t\t\t\t");
      out.print((comstats.size()>0)?"<th colspan='2'>Comparative</th>":"");
      out.write("\n");
      out.write("\t\t\t\t");
      out.print((ratiostats.size()>0)?"<th colspan='2'>Ratio</th>":"");
      out.write("\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\t\t\t<tr>");
      out.print((sumstatsArr.size()>0||comstats.size()>0||ratiostats.size()>0)?"":"<th></th><th>"+mainlabel+"</th>");
      out.write("\n");
      out.write("\t\t\t\t");
      out.print((sumstatsArr.size()>0)?"<th>"+mainlabel+"</th>":"");
      out.write('\n');
      out.write('	');
      out.write('	');

			for(String sl : sumslabel){
				out.print("<th>"+sl+"</th>");
			}
		
      out.write("\n");
      out.write("\t\t\t");
      out.print((sumstatsArr.size()>0)?"<th>Total</th>":"");
      out.write("\n");
      out.write("\t\t\t");
      out.print((comstats.size()>0)?"<th>"+comlabel+"</th><th>"+allsumlabel+"-"+comlabel+" (percentage)</th>":"");
      out.write("\n");
      out.write("\t\t\t");
      out.print((ratiostats.size()>0)?"<th>"+ratiolabel+"</th><th>"+ratiolabel2+"</th>":"");
      out.write("</tr>\n");
      out.write("\n");
      out.write("            ");
      out.print(vrow);
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<tr><th>Total</th><td>");
      out.print(vtotal[0]);
      out.write("</td>\n");
      out.write("\t\t");

			for(int i=1;i<vtotal.length;i++){
				out.print("<td>"+vtotal[i]+"</td>");
			}
		
      out.write("\n");
      out.write("\t\t\t");
      out.print((sumstatsArr.size()>0)?"<td>"+rcount+"</td>":"");
      out.write("\n");
      out.write("\t\t\t");
      out.print((comstats.size()>0)?"<td>"+vtotalcom+"</td><td>"+(rcount-vtotalcom)+" ("+dformat.format(((rcount-vtotalcom)/vtotalcom)*100)+"%)</td>":"");
      out.write("\n");
      out.write("\t\t\t");
String ratiostr = (vtotalrat<rcount)?dformat.format(rcount/vtotalrat)+" ("+ratiolabel+":"+allsumlabel+")":dformat.format(vtotalrat/rcount)+" ("+allsumlabel+":"+ratiolabel+")";
      out.write("\n");
      out.write("\t\t\t");
      out.print((ratiostats.size()>0)?"<td>"+vtotalrat+"</td><td>1 : "+ratiostr+"</td>":"");
      out.write("</tr>\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <!--Canvas for pie chart-->\n");
      out.write("        <canvas id=\"chart2\" width=\"550\" height=\"400\" style=\"float:right;display:block;\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("        <!--Canvas for bar chart-->\n");
      out.write("        <canvas id=\"chart1\" width=\"550\" height=\"400\" style=\"float:left;display:block;\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("\t\t<h3>");
      out.print(allsumlabel);
      out.write(" VS ");
      out.print(comlabel);
      out.write("</h3>\n");
      out.write("\n");
      out.write("        <!--Canvas for bipolar chart-->\n");
      out.write("        <canvas id=\"chart3-1\" width=\"500\" height=\"180\" style=\"float:left;display:block;\">No canvas support</canvas>\n");
      out.write("        <canvas id=\"chart3-2\" width=\"500\" height=\"180\" style=\"float:left;display:block;\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("        <!--Canvas for bipolar chart-->\n");
      out.write("        <canvas id=\"chart4\" width=\"1100\" height=\"180\" style=\"float:left;display:block;\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("\t\t<!--<h3>");
      out.print(ratiolabel2);
      out.write("</h3>-->\n");
      out.write("\n");
      out.write("\n");
      out.write("        <!--Charts script from RGraph-->\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("\t\t\t");
      out.print(jsBarLbs);
      out.write("\n");
      out.write("            window.onload = function() {\n");
      out.write("                var bar = new RGraph.Bar('chart1', [");
      out.print(bvalues);
      out.write("])\n");
      out.write("\t\t\t\t\t.Set('labels', [");
      out.print(blabels);
      out.write("])\n");
      out.write("\t\t\t\t\t.Set('labels.above', true)\n");
      out.write("\t\t\t\t\t.Set('grouping', 'stacked')\n");
      out.write("\t\t\t\t\t.Set('text.angle', 20)\n");
      out.write("\t\t\t\t\t.Set('gutter.left', 50)\n");
      out.write("\t\t\t\t\t.Set('gutter.bottom', 100)\n");
      out.write("\t\t\t\t\t.on('draw', function (obj)\n");
      out.write("\t\t\t\t\t{\n");
      out.write("\t\t\t\t\t\tfor (var i=0; i<obj.coords.length; ++i) {\n");
      out.write("\t\t\t\t\t\t\tvar idx = (i+1);\n");
      out.write("\t\t\t\t\t\t\tif(idx>stackLbs.length){\n");
      out.write("\t\t\t\t\t\t\t\tidx = ((idx%stackLbs.length)==0)?stackLbs.length:(idx%stackLbs.length);\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\tobj.context.fillStyle = 'white';\n");
      out.write("\t\t\t\t\t\t\tRGraph.Text2(obj.context, {\n");
      out.write("\t\t\t\t\t\t\t\tfont:'Verdana',\n");
      out.write("\t\t\t\t\t\t\t\t'size':10,\n");
      out.write("\t\t\t\t\t\t\t\t'x':obj.coords[i][0] + (obj.coords[i][2] / 2),\n");
      out.write("\t\t\t\t\t\t\t\t'y':obj.coords[i][1] + (obj.coords[i][3] / 2),\n");
      out.write("\t\t\t\t\t\t\t\t'text':obj.data_arr[i].toString()+' ('+stackLbs[idx-1]+')',\n");
      out.write("\t\t\t\t\t\t\t\t'valign':'center',\n");
      out.write("\t\t\t\t\t\t\t\t'halign':'center'\n");
      out.write("\t\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t})\n");
      out.write("\t\t\t\t\t.Draw();\n");
      out.write("                var pie = new RGraph.Pie('chart2', [");
      out.print(cvalues);
      out.write("])\n");
      out.write("\t\t\t\t\t.Set('gutter.left', 180)\n");
      out.write("\t\t\t\t\t.Set('gutter.right', 180)\n");
      out.write("\t\t\t\t\t.Set('gutter.bottom', 100)\n");
      out.write("\t\t\t\t\t.Set('exploded', [3,])\n");
      out.write("\t\t\t\t\t.Set('labels', [");
      out.print(ctooltips);
      out.write("])\n");
      out.write("\t\t\t\t\t.Draw();     \n");
      out.write("\t\t\t\tvar hbar = new RGraph.HBar({\n");
      out.write("\t\t\t\t\tid: 'chart3-1',\n");
      out.write("\t\t\t\t\tdata: [");
      out.print(hbar1v);
      out.write("],\n");
      out.write("\t\t\t\t\toptions: {\n");
      out.write("\t\t\t\t\t\tlabelsAbove: true,\n");
      out.write("\t\t\t\t\t\tlabels: [");
      out.print(hbar1);
      out.write("],\n");
      out.write("\t\t\t\t\t\ttitle: '");
      out.print(allsumlabel);
      out.write("',\n");
      out.write("\t\t\t\t\t\tbackgroundGridDashed: true,\n");
      out.write("\t\t\t\t\t\tbackgroundGridAutofitNumhlines: 9,\n");
      out.write("\t\t\t\t\t\tgutterTop: 35,\n");
      out.write("\t\t\t\t\t\tgutterLeft: 120,\n");
      out.write("\t\t\t\t\t\tgutterBottom: 50\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}).draw()\n");
      out.write("\n");
      out.write("\t\t\t\tvar hbar2 = new RGraph.HBar({\n");
      out.write("\t\t\t\t\tid: 'chart3-2',\n");
      out.write("\t\t\t\t\tdata: [");
      out.print(hbar2v);
      out.write("],\n");
      out.write("\t\t\t\t\toptions: {\n");
      out.write("\t\t\t\t\t\tlabelsAbove: true,\n");
      out.write("\t\t\t\t\t\tlabels: [");
      out.print(hbar2);
      out.write("],\n");
      out.write("\t\t\t\t\t\ttitle: '");
      out.print(comlabel);
      out.write("',\n");
      out.write("\t\t\t\t\t\tbackgroundGridDotted: true,\n");
      out.write("\t\t\t\t\t\tbackgroundGridAutofitNumhlines: 9,\n");
      out.write("\t\t\t\t\t\tgutterTop: 35,\n");
      out.write("\t\t\t\t\t\tgutterLeft: 120,\n");
      out.write("\t\t\t\t\t\tgutterBottom: 50\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}).draw();\n");
      out.write("\t\t\t\tvar bi = new RGraph.Bipolar({\n");
      out.write("\t\t\t\t\tid: 'chart4',\n");
      out.write("\t\t\t\t\tleft: [");
      out.print(lbivalues);
      out.write("],\n");
      out.write("\t\t\t\t\tright: [");
      out.print(rbivalues);
      out.write("],\n");
      out.write("\t\t\t\t\toptions: {\n");
      out.write("\t\t\t\t\t\tgutterCenter: 120,\n");
      out.write("\t\t\t\t\t\tgutterBottom: 50,\n");
      out.write("\t\t\t\t\t\ttitleLeft: '");
      out.print(allsumlabel);
      out.write("',\n");
      out.write("\t\t\t\t\t\ttitleRight: '");
      out.print(comlabel);
      out.write("',\n");
      out.write("\t\t\t\t\t\ttextColor: '#515151',\n");
      out.write("\t\t\t\t\t\ttextSize: 12,\n");
      out.write("\t\t\t\t\t\tlabels: [");
      out.print(blabels);
      out.write("],\n");
      out.write("\t\t\t\t\t\tcolors: ['gradient(red:red:red:red:#c00:#c00:#c00:red:red:red:red)']\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}).grow();\n");
      out.write("\t\t\t\tbi.Set('labels.above',true);\n");
      out.write("            };\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
