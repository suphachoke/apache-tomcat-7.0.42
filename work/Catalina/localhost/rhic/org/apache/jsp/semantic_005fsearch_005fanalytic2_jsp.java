/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2015-12-29 22:58:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import h2s.BDecoder;
import java.util.Set;
import java.util.TreeMap;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.engine.binding.Binding;
import com.hp.hpl.jena.graph.Node;
import java.util.List;
import com.hp.hpl.jena.query.ResultSetFactory;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.URLEncoder;
import java.util.Properties;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;

public final class semantic_005fsearch_005fanalytic2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");

	request.setCharacterEncoding("UTF-8");
	Properties props = new Properties();
	props.load(getServletContext().getResourceAsStream("WEB-INF/config.properties"));
	String fullsparql = "";
	String label = "";

	if (request.getParameter("analytic_id") != null) {
		Class.forName("com.mysql.jdbc.Driver");
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + props.getProperty("db_name"), props.getProperty("db_user"), props.getProperty("db_pass"));
		Statement stmt = conn.createStatement();
		ResultSet res = stmt.executeQuery("select * from analytic where id='" + request.getParameter("analytic_id") + "'");
		if (res.next()) {
			fullsparql = res.getString("sparql");
			label = res.getString("label");
		}
	}
	String fullmsg = "query=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
	Socket sock = new Socket(props.getProperty("rdf_host"), Integer.parseInt(props.getProperty("rdf_port")));
	String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
			+ "Host: " + props.getProperty("rdf_host") + ":" + props.getProperty("rdf_port") + "\r\n"
			+ "Content-Length: " + fullmsg.length() + "\r\n"
			+ "Content-Type: application/x-www-form-urlencoded\r\n"
			+ "\r\n"
			+ fullmsg;
	PrintWriter os = new PrintWriter(sock.getOutputStream());
	os.println(msg);
	os.flush();

	InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
	BufferedReader br = new BufferedReader(is);
	String outmsg = "";
	String line;
	while ((line = br.readLine()) != null) {
		outmsg += line;
	}

	os.close();
	is.close();
	sock.close();


      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            table {background: gray;}\n");
      out.write("            th {background: lightgray;}\n");
      out.write("            td {background: white;}\n");
      out.write("            td,th {padding:5px;}\n");
      out.write("        </style>\n");
      out.write("        <script src=\"jslibraries/RGraph.common.core.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph.common.dynamic.js\" ></script>\n");
      out.write("        <!--<script src=\"jslibraries/RGraph.common.tooltips.js\" ></script>-->\n");
      out.write("        <script src=\"jslibraries/RGraph.pie.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph.bar.js\" ></script>\n");
      out.write("        <script src=\"jslibraries/RGraph.line.js\" ></script>\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <!--<textarea rows=\"5\" cols=\"10\">");
      out.print(outmsg);
      out.write("</textarea>-->\n");
      out.write("        ");

            BDecoder decoder = new BDecoder();
            com.hp.hpl.jena.query.ResultSet results = ResultSetFactory.fromXML("<?xml version=" + outmsg.split("<?xml version=")[1]);

            TreeMap<String, Double> stats = new TreeMap<String, Double>();
			List<String> vars = results.getResultVars();
			double rcount = 0;
			if (results.hasNext()) {
				Binding bi = results.nextBinding();
				for (String v : vars) {
					Node obj = bi.get(Var.alloc(v));
					double vl = (obj != null) ? Double.parseDouble(obj.getLiteralLexicalForm()) : 0;
					stats.put(v, vl);
					rcount += vl;
				}
			}

            Set<String> keys = stats.keySet();
            String vrow = "";
            String cvalues = "";
            String clabels = "";
            String clabels_lite = "";
            String clabels_step = "";
        
      out.write("\n");
      out.write("        <h3>");
      out.print(label);
      out.write("</h3>\n");
      out.write("\t\t<!--<textarea style=\"width:100%;\">");
      out.print(fullsparql);
      out.write("</textarea>-->\n");
      out.write("        <table id=\"analytic_table\">\n");
      out.write("            <tr>\n");
      out.write("                ");

                    int c = 1;
                    for (String k : keys) {
                        String newK = "";
                        String[] karr = k.split(" ");
                        int kcount = 1;
                        for (String ka : karr) {
                            if (newK.length() > (kcount * 30)) {
                                newK += "\\r\\n";
                                kcount++;
                            }
                            newK += " " + ka;
                        }
                        vrow += "<td>" + stats.get(k) + "</td>";
                        double percentage = (stats.get(k) / rcount) * 100.0d;
                        clabels += (clabels.equals("")) ? "'" + newK + " (" + percentage + "%)'" : ",'" + newK + "(" + percentage + "%)'";
                        clabels_lite += (clabels_lite.equals("")) ? "'" + newK + "'" : ",'" + newK + "'";
                        String step = (c % 2 == 0) ? "\\r\\n" : "";
                        clabels_step += (clabels_step.equals("")) ? "'" + step + newK + "'" : ",'" + step + newK + "'";
                        cvalues += (cvalues.equals("")) ? stats.get(k) : "," + stats.get(k);
                
      out.write("\n");
      out.write("                <th>");
      out.print(k);
      out.write("</th>\n");
      out.write("                    ");
 c++;
                        }
      out.write("\n");
      out.write("            </tr>\n");
      out.write("            <tr>");
      out.print(vrow);
      out.write("</tr>\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <!--Canvas for pie chart drawing-->\n");
      out.write("        <canvas id=\"chart1\" width=\"800\" height=\"400\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("        <!--Canvas for bar chart-->\n");
      out.write("        <canvas id=\"chart2\" width=\"800\" height=\"400\">No canvas support</canvas>\n");
      out.write("\n");
      out.write("        <!--Canvas for line chart-->\n");
      out.write("        <!--<canvas id=\"chart3\" width=\"1000\" height=\"400\">No canvas support</canvas>-->\n");
      out.write("\n");
      out.write("        <!--Charts script from RGraph-->\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            window.onload = function() {\n");
      out.write("                var pie = new RGraph.Pie('chart1', [");
      out.print(cvalues);
      out.write("])\n");
      out.write("                        .Set('labels', [");
      out.print(clabels);
      out.write("])\n");
      out.write("                        .Set('gutter.right', 150)\n");
      out.write("                        .Set('gutter.left', 150)\n");
      out.write("                        .Set('gutter.top', 50)\n");
      out.write("                        .Set('gutter.bottom', 50)\n");
      out.write("                        .Draw();\n");
      out.write("                var bar = new RGraph.Bar('chart2', [");
      out.print(cvalues);
      out.write("])\n");
      out.write("                        .Set('labels', [");
      out.print(clabels_lite);
      out.write("])\n");
      out.write("                        .Set('labels.above', true)\n");
      out.write("                        .Set('text.angle', 20)\n");
      out.write("                        .Set('gutter.bottom', 120)\n");
      out.write("                        .Set('gutter.left', 200)\n");
      out.write("                        .Draw();\n");
      out.write("                var line = new RGraph.Line('chart3', [");
      out.print(cvalues);
      out.write("])\n");
      out.write("                        .Set('background.grid.dashed', true)\n");
      out.write("                        .Set('labels', [");
      out.print(clabels_step);
      out.write("])\n");
      out.write("                        .Set('background.grid.dashed', true)\n");
      out.write("                        .Set('gutter.bottom', 40)\n");
      out.write("                        .Set('gutter.left', 160)\n");
      out.write("                        .Draw();\n");
      out.write("            };\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
