/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2016-01-02 11:03:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.hp.hpl.jena.shared.WrappedIOException;
import java.io.FileNotFoundException;
import java.net.URLEncoder;
import com.hp.hpl.jena.rdf.model.impl.ResourceImpl;
import com.hp.hpl.jena.ontology.impl.ObjectPropertyImpl;
import java.util.Comparator;
import java.util.Collections;
import java.util.Locale;
import java.util.HashMap;
import com.hp.hpl.jena.rdf.model.Resource;
import java.util.ArrayList;
import com.hp.hpl.jena.ontology.impl.OntResourceImpl;
import com.hp.hpl.jena.ontology.OntClass;
import java.io.FileOutputStream;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.io.File;
import com.hp.hpl.jena.rdf.model.RDFNode;
import java.util.Iterator;
import com.hp.hpl.jena.ontology.Individual;
import java.util.Properties;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.ontology.OntModel;

public final class patient_005fdocument_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String getUpdateState(Properties props, String key, String section, String fileDT, String service) throws Exception {

        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + props.getProperty("db_name"), props.getProperty("db_user"), props.getProperty("db_pass"));
        Statement stmt = conn.createStatement();
        Date dt = new Date();
        String curDT = new SimpleDateFormat("dd/MM/yyyy").format(dt);
        ResultSet res0 = stmt.executeQuery("select STR_TO_DATE(lastdate,'%d/%m/%Y') AS lastdate,status from retrieval_individual where id='" + key + section + "' order by lastdate desc");
        String laststatus = "";
        if (res0.next()) {
            fileDT = res0.getString("lastdate");
            laststatus = res0.getString("status");
        }
        ResultSet res = stmt.executeQuery("select * from retrieval_individual where id='" + key + section + "' and date='" + curDT + "'");
        String state = fileDT + " <a href='javascript: void(0);' onclick=\"wsexecution(this,'id=" + key + "&section=" + section + "&lastdate=" + fileDT + "&service=" + service + "');\">อัพเดทข้อมูล</a>";
        if (res.next()) {
            if (res.getString("status").equals("successful")) {
                state = fileDT + " <a href='javascript: void(0);' onclick=\"wsexecution(this,'id=" + key + "&section=" + section + "&lastdate=" + fileDT + "&service=" + service + "');\">ข้อมูลเป็นปัจจุบันแล้ว</a>";
            } else if (res.getString("status").equals("waiting")) {
                state = fileDT + " <a href='javascript: void(0);' onclick=\"alert('ไม่สามารถเรียกข้อมูลซ้ำได้');window.location.href='patient_document.jsp?id=" + key + "';\">กำลังอัพเดทข้อมูล</a><img style='padding:0;margin:0;border:0;' src='images/ajax-loader.gif'/>&nbsp;|&nbsp;"
                        + "<a href='retrieval_cancel.jsp?id=" + key + "&section=" + section + "&lastdate=" + fileDT + "'>ยกเลิก</a>";
            }
        }

        return state;
    }

    public String getLabName(String labcode) {
        String ret = "-";

        if (labcode.equals("01")) {
            ret = "ตรวจน้ำตาลในเลือด จากหลอดเลือดดำ หลังอดอาหาร";
        } else if (labcode.equals("02")) {
            ret = "ตรวจน้ำตาลในเลือด จากหลอดเลือดดำ โดยไม่อดอาหาร";
        } else if (labcode.equals("03")) {
            ret = "ตรวจน้ำตาลในเลือด จากเส้นเลือดฝอย หลังอดอาหาร";
        } else if (labcode.equals("04")) {
            ret = "ตรวจน้ำตาลในเลือด จากเส้นเลือดฝอย โดยไม่อดอาหาร";
        } else if (labcode.equals("05")) {
            ret = "ตรวจ HbA1C";
        } else if (labcode.equals("06")) {
            ret = "ตรวจ Triglyceride";
        } else if (labcode.equals("07")) {
            ret = "ตรวจ Total Cholesterol";
        } else if (labcode.equals("08")) {
            ret = "ตรวจ HDL Cholesterol";
        } else if (labcode.equals("09")) {
            ret = "ตรวจ LDL Cholesterol";
        } else if (labcode.equals("10")) {
            ret = "ตรวจ BUN ในเลือด";
        } else if (labcode.equals("11")) {
            ret = "ตรวจ Creatinine ในเลือด";
        } else if (labcode.equals("12")) {
            ret = "ตรวจโปรตีน microalbumin ในปัสสาวะ";
        } else if (labcode.equals("13")) {
            ret = "ตรวจ Creatinine ในปัสสาวะ";
        } else if (labcode.equals("14")) {
            ret = "ตรวจโปรตีน macroalbumin ในปัสสาวะ";
        } else if (labcode.equals("15")) {
            ret = "ตรวจหาค่า eGFR (สูตร CKD-EPI formular)";
        } else if (labcode.equals("16")) {
            ret = "ตรวจ Hb";
        } else if (labcode.equals("17")) {
            ret = "ตรวจ UPCR (Urine protien creatinine ratio)";
        } else if (labcode.equals("18")) {
            ret = "ตรวจ K (กรณี CKD stage 3 ขี้นไป หรือได้ยา ACEI//ARBs)";
        } else if (labcode.equals("19")) {
            ret = "ตรวจ Bicrab (กรณี CKD stage 3 ขึ้นไป)";
        } else if (labcode.equals("20")) {
            ret = "ตรวจ phosphate (กรณี CKD stage 3 ขึ้นไป)";
        } else if (labcode.equals("21")) {
            ret = "ตรวจ PTH (กรณี CKD stage 3 ขึ้นไป)";
        }

        return ret;
    }

    public String getGH(String gh) {
        String ret = "-";

        if (gh.equals("1")) {
            ret = "ปกติ";
        } else if (gh.equals("2")) {
            ret = "ผิดปกติ";
        } else if (gh.equals("9")) {
            ret = "ไม่ทราบ";
        }

        return ret;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <HEAD>\r\n");
      out.write("        <TITLE> New Document </TITLE>\r\n");
      out.write("        <meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"/>\r\n");
      out.write("        <META NAME=\"Generator\" CONTENT=\"EditPlus\"/>\r\n");
      out.write("        <META NAME=\"Author\" CONTENT=\"\"/>\r\n");
      out.write("        <META NAME=\"Keywords\" CONTENT=\"\"/>\r\n");
      out.write("        <META NAME=\"Description\" CONTENT=\"\"/>\r\n");
      out.write("        <style type=\"text/css\">\r\n");
      out.write("            /*defined standard tags*/\r\n");
      out.write("            * {margin:0;padding:0;font-size: 10pt;font-family: serif;}\r\n");
      out.write("            h1 {font-weight:bold; font-size:24pt;}\r\n");
      out.write("            h2 {font-weight:bold; font-size:22pt;}\r\n");
      out.write("            h3 {font-weight:bold; font-size:20pt;}\r\n");
      out.write("            h4 {font-weight:bold; font-size:18pt;}\r\n");
      out.write("            h5 {font-weight:bold; font-size:16pt;}\r\n");
      out.write("            h6 {font-weight:bold; font-size:14pt;}\r\n");
      out.write("\r\n");
      out.write("            /*defined global classes*/\r\n");
      out.write("            .left {display:block;float:left;}\r\n");
      out.write("            .right {display:block;float:right;}\r\n");
      out.write("            .center {text-align:center;}\r\n");
      out.write("            .clearleft {display:block;clear:left;}\r\n");
      out.write("            .clearright {display:block;clear:right;}\r\n");
      out.write("            .horizontal * {display:block;float:left;}\r\n");
      out.write("            .vertical * {display:block;list-style:none;}\r\n");
      out.write("            /*.small {font-size: 8pt;}*/\r\n");
      out.write("            .medium {font-size: 10pt}\r\n");
      out.write("            .large {font-size: 12pt;}\r\n");
      out.write("            .verylarge {font:14pt arial;}\r\n");
      out.write("            .eighthbox {width:50px;height:50px;}\r\n");
      out.write("            .quarterbox {width:100px;height:100px;}\r\n");
      out.write("            .halfbox {width:200px;height:200px;}\r\n");
      out.write("            .triplebox {width:300px;height:300px;}\r\n");
      out.write("            .fullbox {width:400px;height:400px;}\r\n");
      out.write("            .tripledotbox {width:600px;height:600px;}\r\n");
      out.write("            .doublebox {width:800px;height:800px;}\r\n");
      out.write("            .eighth {width:50px;}\r\n");
      out.write("            .quarter {width:100px;}\r\n");
      out.write("            .half {width:200px;}\r\n");
      out.write("            .triple {width:300px;}\r\n");
      out.write("            .full {width:400px;}\r\n");
      out.write("            .tripledot {width:600px;}\r\n");
      out.write("            .double {width:800px;}\r\n");
      out.write("\r\n");
      out.write("            /*defined specific tags-classes*/\r\n");
      out.write("            table * {text-align:left;}\r\n");
      out.write("            caption {text-align:center;font-weight:bold;font-size:12pt;}\r\n");
      out.write("            li {font-weight:bold;}\r\n");
      out.write("\r\n");
      out.write("            .lefttab {position:absolute;margin-top:20px;background:gray;color:white;}\r\n");
      out.write("            .lefttab li {padding-left:20px;list-style:none;cursor:pointer;}\r\n");
      out.write("            .lefttab li:hover {background:white;color:gray;}\r\n");
      out.write("\r\n");
      out.write("            .tabpage {background:white;display:none;margin-left:20px;margin-top:30px;}\r\n");
      out.write("            .tabpage caption{width:640px;}\r\n");
      out.write("            .tabpage * {background:white;}\r\n");
      out.write("\r\n");
      out.write("            .panel h6 {background:gray;color:white;}\r\n");
      out.write("            table {margin:10px;}\r\n");
      out.write("            td,th {border:1px solid gray; padding: 3px;}\r\n");
      out.write("            th {background-color:#a3a3a3;}\r\n");
      out.write("            li {padding:2px;}\r\n");
      out.write("\r\n");
      out.write("        </style>\r\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"jslibraries/style.min.mod.css\"/>\r\n");
      out.write("        <script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("            function init() {\r\n");
      out.write("                var n = document.getElementById('tab11');\r\n");
      out.write("                n.style.display = 'block';\r\n");
      out.write("\r\n");
      out.write("                var n2 = document.getElementById('but11');\r\n");
      out.write("                n2.style.color = \"black\";\r\n");
      out.write("                n2.style.background = \"url(https://cdn2.iconfinder.com/data/icons/color-svg-vector-icons-part-2/512/shift_right_arrow_next-20.png) no-repeat left white\";\r\n");
      out.write("\r\n");
      out.write("                var n3 = document.getElementById('tab21');\r\n");
      out.write("                n3.style.display = 'block';\r\n");
      out.write("\r\n");
      out.write("                var n4 = document.getElementById('but21');\r\n");
      out.write("                n4.style.color = \"black\";\r\n");
      out.write("                n4.style.background = \"url(https://cdn2.iconfinder.com/data/icons/color-svg-vector-icons-part-2/512/shift_right_arrow_next-20.png) no-repeat left white\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function tabchange(type, id, nd) {\r\n");
      out.write("                /*button changes*/\r\n");
      out.write("                var ndsB = nd.parentNode.childNodes;\r\n");
      out.write("                for (var i = 0; i < ndsB.length; i++) {\r\n");
      out.write("                    if (ndsB[i].nodeName.toLowerCase() == 'li') {\r\n");
      out.write("                        ndsB[i].style.color = 'white';\r\n");
      out.write("                        ndsB[i].style.background = 'gray';\r\n");
      out.write("                        ndsB[i].onmouseover = function(e) {\r\n");
      out.write("                            var ev = e || window.event;\r\n");
      out.write("                            var tar = ev.target || ev.srcElement;\r\n");
      out.write("                            tar.style.color = 'gray';\r\n");
      out.write("                            tar.style.backgroundColor = 'white';\r\n");
      out.write("                        };\r\n");
      out.write("                        ndsB[i].onmouseout = function(e) {\r\n");
      out.write("                            var ev = e || window.event;\r\n");
      out.write("                            var tar = ev.target || ev.srcElement;\r\n");
      out.write("                            tar.style.color = 'white';\r\n");
      out.write("                            tar.style.backgroundColor = 'gray';\r\n");
      out.write("                        };\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                nd.style.color = 'black';\r\n");
      out.write("                nd.style.background = 'url(https://cdn2.iconfinder.com/data/icons/color-svg-vector-icons-part-2/512/shift_right_arrow_next-20.png) no-repeat left white';\r\n");
      out.write("                nd.onmouseover = null;\r\n");
      out.write("                nd.onmouseout = null;\r\n");
      out.write("\r\n");
      out.write("                /*tab changes*/\r\n");
      out.write("                var n = document.getElementById(id);\r\n");
      out.write("                var p = n.parentNode;\r\n");
      out.write("                var nds = p.childNodes;\r\n");
      out.write("                for (var i = 0; i < nds.length; i++) {\r\n");
      out.write("                    if (nds[i].nodeName.toLowerCase() == type) {\r\n");
      out.write("                        nds[i].style.display = 'none';\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                n.style.display = 'block';\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            var loadingNd = document.createElement(\"IMG\");\r\n");
      out.write("            loadingNd.setAttribute(\"src\", \"images/ajax-loader.gif\");\r\n");
      out.write("            loadingNd.setAttribute(\"style\", \"margin:0;padding:0;border:0;\");\r\n");
      out.write("\r\n");
      out.write("            function wsexecution(nd, param) {\r\n");
      out.write("                var xmlhttp = null;\r\n");
      out.write("                if (window.XMLHttpRequest) {\r\n");
      out.write("                    xmlhttp = new XMLHttpRequest();\r\n");
      out.write("                } else {\r\n");
      out.write("                    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("                }\r\n");
      out.write("                if (xmlhttp !== null) {\r\n");
      out.write("                    nd.childNodes[0].nodeValue = \"(กำลังอัพเดทข้อมูล)\";\r\n");
      out.write("                    nd.appendChild(loadingNd);\r\n");
      out.write("                    nd.onclick = function() {\r\n");
      out.write("                        alert('ไม่สามารถเรียกข้อมูลซ้ำได้');\r\n");
      out.write("                    };\r\n");
      out.write("                    xmlhttp.open(\"POST\", \"wsexecution.jsp?\" + Math.random());\r\n");
      out.write("                    xmlhttp.onreadystatechange = function() {\r\n");
      out.write("                        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n");
      out.write("                            nd.childNodes[0].nodeValue = \"(ข้อมูลเป็นปัจจุบันแล้ว)\";\r\n");
      out.write("                            window.location.href = 'patient_document.jsp?id=' + param.substr(3, param.indexOf(\"&\") - 3);\r\n");
      out.write("                            nd.onclick = function() {\r\n");
      out.write("                                wsexecution(this, param);\r\n");
      out.write("                            };\r\n");
      out.write("                        } else {\r\n");
      out.write("                        }\r\n");
      out.write("                    };\r\n");
      out.write("                    xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("                    xmlhttp.send(param);\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert(\"Browser not support XMLHTTP!\");\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function datareasoning(nd, param) {\r\n");
      out.write("                var xmlhttp = null;\r\n");
      out.write("                if (window.XMLHttpRequest) {\r\n");
      out.write("                    xmlhttp = new XMLHttpRequest();\r\n");
      out.write("                } else {\r\n");
      out.write("                    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("                }\r\n");
      out.write("                if (xmlhttp !== null) {\r\n");
      out.write("                    nd.childNodes[0].nodeValue = \"(กำลังประมวลผล)\";\r\n");
      out.write("                    nd.appendChild(loadingNd);\r\n");
      out.write("                    nd.onclick = function() {\r\n");
      out.write("                        alert('ไม่สามารถเรียกซ้ำได้');\r\n");
      out.write("                    };\r\n");
      out.write("                    xmlhttp.open(\"POST\", \"datareasoning.jsp?\" + Math.random());\r\n");
      out.write("                    xmlhttp.onreadystatechange = function() {\r\n");
      out.write("                        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n");
      out.write("                            nd.childNodes[0].nodeValue = \"(ประมวลผลข้อมูล)\";\r\n");
      out.write("                            window.location.href = 'patient_document.jsp?id=' + param.substr(3);\r\n");
      out.write("                            nd.onclick = function() {\r\n");
      out.write("                                datareasoning(this, param);\r\n");
      out.write("                            };\r\n");
      out.write("                        } else {\r\n");
      out.write("                        }\r\n");
      out.write("                    };\r\n");
      out.write("                    xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("                    xmlhttp.send(param);\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert(\"Browser not support XMLHTTP!\");\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.common.core.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.common.dynamic.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.common.context.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.pie.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.bar.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.line.js\" ></script>\r\n");
      out.write("        <script src=\"jslibraries/RGraph.drawing.text.js\" ></script>\r\n");
      out.write("    </HEAD>\r\n");
      out.write("    ");

        try{//catch FileNotFoundException
            
        Properties props = new Properties();
        props.load(getServletContext().getResourceAsStream("/WEB-INF/config.properties"));
        OntModel mod = ModelFactory.createOntologyModel();
        mod.read("file:/" + props.getProperty("sidi_path") + "/data/" + request.getParameter("id") + ".owl");
        Iterator<Individual> it = mod.listIndividuals(mod.getOntClass("http://202.28.94.50/ontologies/healthcare/hl7.owl#Patient"));
            
        File file = new File(props.getProperty("sidi_path") + "/data/" + request.getParameter("id") + ".owl");
        String fileDT = new SimpleDateFormat("dd/MM/yyyy").format(file.lastModified());

        String state = getUpdateState(props, request.getParameter("id"), "", fileDT, "select_patient_service");
    
      out.write(" \r\n");
      out.write("    <body onload=\"init();\">\r\n");
      out.write("        <h3>Patient Information Sheet</h3>\r\n");
      out.write("        <img id=\"patient_img\" class=\"left\" src=\"images/PatientFile.png\"/>\r\n");
      out.write("        <div class=\"general_info_panel\">\r\n");
      out.write("            <h6>General Information</h6>\r\n");
      out.write("            <span>[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]&nbsp;|<a href='javascript: void(0);' onclick=\"datareasoning(this,'id=");
      out.print(request.getParameter("id"));
      out.write("');\">(ประมวลผลข้อมูล)</a></span>\r\n");
      out.write("            ");

                String doNS = "http://202.28.94.50/ontologies/healthcare/hl7.owl#";
                boolean isFemale = false;

                //Activity Objects
                HashMap<Date, Object> diagnosis = new HashMap<Date, Object>();
                ArrayList<Date> sortDiag = new ArrayList<Date>();
                int countDiag = 0;
                HashMap<Date, Object> physical = new HashMap<Date, Object>();
                ArrayList<Date> sortPhysic = new ArrayList<Date>();
                int countPhysic = 0;
                HashMap<Date, Object> lab = new HashMap<Date, Object>();
                ArrayList<Date> sortLab = new ArrayList<Date>();
                int countLab = 0;
                HashMap<Date, Object> vacc = new HashMap<Date, Object>();
                ArrayList<Date> sortVacc = new ArrayList<Date>();
                int countVacc = 0;
                HashMap<Date, Object> preg = new HashMap<Date, Object>();
                ArrayList<Date> sortPreg = new ArrayList<Date>();
                int countPreg = 0;
                HashMap<Date, Object> drug = new HashMap<Date, Object>();
                ArrayList<Date> sortDrug = new ArrayList<Date>();
                int countDrug = 0;

                ArrayList<String> hosArr = new ArrayList<String>();

                //Statistic variables
                String weightLab = "";
                String weightVal = "";
                String weightMrk = "";
                String heightLab = "";
                String heightVal = "";
                String heightMrk = "";
                String bpLab = "";
                String bpVal = "";
                String bpMrk = "";

                while (it.hasNext()) {
                    Individual in = it.next();

                    //Read data from patient's properties
                    RDFNode cid = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#citizen_id"));
                    //Report data fields
                    String hosname = "";

                    //Node of data accessing
                    RDFNode nd1 = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#patient_of"));
                    if (nd1 != null) {
                        Individual hind = mod.getIndividual(nd1.asResource().getURI());
                        hosname = hind.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#organization_name")).asLiteral().getString();
                    }

                    if (cid != null && !hosArr.contains(hosname)) {
                        hosArr.add(hosname);

                        RDFNode hn = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#patient_code"));
                        RDFNode title = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#prefix"));
                        RDFNode fname = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#given_name"));
                        RDFNode lname = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#family_name"));
                        RDFNode birth = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#birthdate"));
                        RDFNode gen = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#gender"));
                        RDFNode gen2 = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/co.owl#gender"));
                        if (gen2 != null && gen2.asLiteral().getString().equals("Female")) {
                            isFemale = true;
                        }
                        if (gen != null && gen.asLiteral().getString().equals("หญิง")) {
                            isFemale = true;
                        }
                        RDFNode gender = (gen2 != null) ? gen2 : gen;
                        RDFNode addr = in.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#live_in"));
                        String address = "-";
                        if (addr != null) {
                            Individual inaddr = (addr.isAnon()) ? mod.getOntResource(addr.asResource()).asIndividual() : mod.getIndividual(addr.asResource().getURI());
                            RDFNode home = inaddr.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#home_number"));
                            String homenum = (home != null) ? home.asLiteral().getString() : "";
                            RDFNode prov = inaddr.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#province"));
                            String province = (prov != null) ? "จ." + prov.asLiteral().getString() : "";
                            RDFNode dist = inaddr.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#district"));
                            String district = (dist != null) ? "อ." + dist.asLiteral().getString() : "";
                            RDFNode subdist = inaddr.getPropertyValue(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#subdistrict"));
                            String subdistrict = (subdist != null) ? "ต." + subdist.asLiteral().getString() : "";
                            address = homenum + " " + subdistrict + " " + district + " " + province;
                        }

                        //Get Clinical Actions records
                        Iterator itd = in.listPropertyValues(mod.getProperty("http://202.28.94.50/ontologies/healthcare/hl7.owl#subject_of"));
                        while (itd.hasNext()) {
                            OntResourceImpl cls = (OntResourceImpl) itd.next();
                            if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Physical_Observation")) {
                                RDFNode eftnd = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (eftnd != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(eftnd.asLiteral().getString());
                                    Object oldr = physical.get(d);
                                    if (oldr == null) {
                                        physical.put(d, cls);
                                        sortPhysic.add(d);
                                        countPhysic++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                                countPhysic++;
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                                countPhysic++;
                                            }
                                            physical.put(d, newarr);
                                        }
                                    }
                                }
                            } else if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Diagnosis")) {
                                RDFNode diand = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (diand != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(diand.asLiteral().getString());
                                    Object oldr = diagnosis.get(d);
                                    if (oldr == null) {
                                        diagnosis.put(d, cls);
                                        sortDiag.add(d);
                                        countDiag++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                                countDiag++;
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                                countDiag++;
                                            }
                                            diagnosis.put(d, newarr);
                                        }
                                    }
                                }
                            } else if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Laboratory")) {
                                RDFNode labnd = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (labnd != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(labnd.asLiteral().getString());
                                    Object oldr = lab.get(d);
                                    if (oldr == null) {
                                        lab.put(d, cls);
                                        sortLab.add(d);
                                        countLab++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                                countLab++;
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                                countLab++;
                                            }
                                            lab.put(d, newarr);
                                        }
                                    }
                                }
                            } else if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Vaccination")) {
                                RDFNode vacnd = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (vacnd != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(vacnd.asLiteral().getString());
                                    Object oldr = vacc.get(d);
                                    if (oldr == null) {
                                        vacc.put(d, cls);
                                        sortVacc.add(d);
                                        countVacc++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                                countVacc++;
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                                countVacc++;
                                            }
                                            vacc.put(d, newarr);
                                        }
                                    }
                                }
                            } else if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Pregnancy_Care")) {
                                RDFNode pregnd = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (pregnd != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(pregnd.asLiteral().getString());
                                    Object oldr = preg.get(d);
                                    if (oldr == null) {
                                        preg.put(d, cls);
                                        sortPreg.add(d);
                                        countPreg++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                                countPreg++;
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                                countPreg++;
                                            }
                                            preg.put(d, newarr);
                                        }
                                    }
                                }
                            } else if (cls.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Drug_Prescription")) {
                                RDFNode drugnd = cls.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                if (drugnd != null) {
                                    Date d = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).parse(drugnd.asLiteral().getString());
                                    Object oldr = drug.get(d);
                                    if (oldr == null) {
                                        drug.put(d, cls);
                                        sortDrug.add(d);
                                        countDrug++;
                                    } else {
                                        if (oldr.getClass().equals(ArrayList.class)) {
                                            ArrayList<OntResourceImpl> oldarr = (ArrayList<OntResourceImpl>) oldr;
                                            if (!oldarr.contains(cls)) {
                                                oldarr.add(cls);
                                            }
                                        } else {
                                            ArrayList<OntResourceImpl> newarr = new ArrayList<OntResourceImpl>();
                                            OntResourceImpl newr = (OntResourceImpl) oldr;
                                            newarr.add(newr);
                                            if (!cls.equals(newr)) {
                                                newarr.add(cls);
                                            }
                                            drug.put(d, newarr);
                                        }
                                    }
                                }
                            }
                        }

                        String fullname = (title != null) ? title.asLiteral().getString() : "-";
                        fullname += (fname != null) ? " " + fname.asLiteral().getString() : " -";
                        fullname += (lname != null) ? " " + lname.asLiteral().getString() : " -";

            
      out.write("\r\n");
      out.write("            <div id=\"tabg1\">\r\n");
      out.write("                <table class=\"left\">\r\n");
      out.write("                    <tr><td colspan=\"2\" style=\"font-weight: bold;\">");
      out.print(hosname);
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>Citizen ID</th><td>");
      out.print(cid.asLiteral().getString());
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>HN</th><td>");
      out.print((hn != null) ? hn.asLiteral().getString() : "-");
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>Full Name</th><td>");
      out.print(fullname);
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>Gender</th><td>");
      out.print((isFemale) ? "Female" : "Male");
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>Birthdate</th><td>");
      out.print((birth != null) ? birth.asLiteral().getString() : "");
      out.write("</td></tr>\r\n");
      out.write("                    <tr><th>Address</th><td>");
      out.print(address);
      out.write("</td></tr>\r\n");
      out.write("                </table>\r\n");
      out.write("                <!--<table class=\"left\">\r\n");
      out.write("                    <caption>Current Address</caption>\r\n");
      out.write("                    <tr><th>House Number</th><td></td></tr>\r\n");
      out.write("                    <tr><th>Sector (หมู่ที่)</th><td></td></tr>\r\n");
      out.write("                    <tr><th>Sub-District</th><td></td></tr>\r\n");
      out.write("                    <tr><th>District</th><td></td></tr>\r\n");
      out.write("                    <tr><th>Province</th><td></td></tr>\r\n");
      out.write("                </table>-->\r\n");
      out.write("            </div>\r\n");
      out.write("            ");
}
                }
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"panel clearleft\">\r\n");
      out.write("            <ul class=\"lefttab left\">\r\n");
      out.write("                <li class=\"left\" id=\"but11\" style=\"color:black;background:url(https://cdn2.iconfinder.com/data/icons/color-svg-vector-icons-part-2/512/shift_right_arrow_next-20.png) no-repeat left white\" onclick=\"tabchange('table', 'tab11', this);\">Physical Exam.</li>\r\n");
      out.write("                <li class=\"left\" onclick=\"tabchange('table', 'tab12', this);\">Diagnosis</li>\r\n");
      out.write("                <li class=\"left\" onclick=\"tabchange('table', 'tab13', this);\">Drug Prescription</li>\r\n");
      out.write("                <li class=\"left\" onclick=\"tabchange('table', 'tab14', this);\">Laboratory</li>\r\n");
      out.write("                <li class=\"left\" onclick=\"tabchange('table', 'tab15', this);\">Vaccination</li>\r\n");
      out.write("                    ");
if (isFemale) {
      out.write("\r\n");
      out.write("                <li class=\"left\" onclick=\"tabchange('table', 'tab16', this);\">Pregnancy Care</li>\r\n");
      out.write("                    ");
}
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("            <h6 class=\"large\">Health Care History</h6>\r\n");
      out.write("            <table id=\"tab11\" class=\"tabpage\" style=\"display:block;\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_physical_exam", fileDT, "physical_exam_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countPhysic);
      out.write(" time(s) of physical examination <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>Weight (Kgs.)</th><th>Height (Cm.)</th><th>Blood Pressure</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortPhysic, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c2 = 1, lc1 = 1, lc2 = 1, lc3 = 1;
                            ArrayList<String> weiarr = new ArrayList<String>();
                            ArrayList<String> heiarr = new ArrayList<String>();
                            ArrayList<String> bparr = new ArrayList<String>();
                            for (Date d : sortPhysic) {
                                //String dlab = (c2 % 2 != 0) ? d.toLocaleString().split(",")[0] : "" + d.toLocaleString().split(",")[0];
                                SimpleDateFormat simd = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
                                String dstr = simd.format(d);
                                String dlab = (c2 % 2 != 0) ? dstr : "" + dstr;
                                Object r1 = physical.get(d);
                                ArrayList<OntResourceImpl> phyarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    phyarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        phyarr.add(tmpr);
                                    }
                                }
                                for (OntResourceImpl r : phyarr) {
                                    Iterator it2 = r.listPropertyValues(mod.getProperty(doNS + "found"));
                                    String weistr = "-";
                                    String heistr = "-";
                                    String bpstr = "-";
                                    while (it2.hasNext()) {
                                        OntResourceImpl wres = (OntResourceImpl) it2.next();
                                        if (wres.hasRDFType("http://202.28.94.50/ontologies/healthcare/hl7.owl#Physical_Finding")) {
                                            RDFNode weiNd = wres.getPropertyValue(mod.getProperty(doNS + "weight"));
                                            if (weiNd != null) {
                                                weistr = weiNd.asLiteral().getString();
                                                if (Double.valueOf(weistr) > 0.0) {
                                                    weightLab = (weightLab.equals("")) ? "'" + dlab + "'" : "'" + dlab + "'," + weightLab;
                                                    weightVal = (weightVal.equals("")) ? weistr : weistr + "," + weightVal;
                                                    //weightMrk += "var markerW" + c2 + " = new RGraph.Drawing.Marker1('chart1', line1.coords[" + (lc1 - 1) + "][0], line1.coords[" + (lc1 - 1) + "][1], 14, '" + weistr + "').Set('highlight.fill', 'rgba(255,0,0,0.5)').Draw();";
                                                    weiarr.add(weistr);
                                                    lc1++;
                                                }
                                            }
                                            RDFNode heiNd = wres.getPropertyValue(mod.getProperty(doNS + "height"));
                                            if (heiNd != null) {
                                                heistr = heiNd.asLiteral().getString();
                                                if (Double.valueOf(heistr) > 0.0) {
                                                    heightLab = (heightLab.equals("")) ? "'" + dlab + "'" : "'" + dlab + "'," + heightLab;
                                                    heightVal = (heightVal.equals("")) ? heistr : heistr + "," + heightVal;
                                                    //heightMrk += "var markerH" + c2 + " = new RGraph.Drawing.Marker1('chart2', line2.coords[" + (lc2 - 1) + "][0], line2.coords[" + (lc2 - 1) + "][1], 14, '" + heistr + "').Set('highlight.fill', 'rgba(255,0,0,0.5)').Draw();";
                                                    heiarr.add(heistr);
                                                    lc2++;
                                                }
                                            }
                                            RDFNode bpNd = wres.getPropertyValue(mod.getProperty(doNS + "blood_pressure"));
                                            if (bpNd != null) {
                                                bpstr = bpNd.asLiteral().getString();
                                                if (Double.valueOf(bpstr) > 0.0) {
                                                    bpLab = (bpLab.equals("")) ? "'" + dlab + "'" : "'" + dlab + "'," + bpLab;
                                                    bpVal = (bpVal.equals("")) ? bpstr : bpstr + "," + bpVal;
                                                    //bpMrk += "var markerB" + c2 + " = new RGraph.Drawing.Marker1('chart3', line3.coords[" + (lc3 - 1) + "][0], line3.coords[" + (lc3 - 1) + "][1], 14, '" + bpstr + "').Set('highlight.fill', 'rgba(255,0,0,0.5)').Draw();";
                                                    bparr.add(bpstr);
                                                    lc3++;
                                                }
                                            }
                                        }
                                    }

                                    Resource hres = r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of"));
                                    String hosname_activity = "";
                                    if (hres != null) {
                                        Individual hos = mod.getIndividual(hres.toString());
                                        hosname_activity = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }

                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print(c2);
      out.write("</td>\r\n");
      out.write("                    <td><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print(r.getPropertyValue(mod.getProperty(doNS + "effective_date")).asLiteral().getString());
      out.write("</a></td>\r\n");
      out.write("                    <td>");
      out.print(weistr);
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(heistr);
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(bpstr);
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(hosname_activity);
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            c2++;
                        }
                    }
                    lc1 = 1;
                    for (String s : weiarr) {
                        weightMrk += "var markerW" + lc1 + " = new RGraph.Drawing.Text('chart1', line1.coords[" + (weiarr.size() - lc1) + "][0], line1.coords[" + (weiarr.size() - lc1) + "][1], '" + s + "').Draw();";
                        lc1++;
                    }
                    lc2 = 1;
                    for (String s : heiarr) {
                        heightMrk += "var markerH" + lc2 + " = new RGraph.Drawing.Text('chart2', line2.coords[" + (heiarr.size() - lc2) + "][0], line2.coords[" + (heiarr.size() - lc2) + "][1], '" + s + "').Draw();";
                        lc2++;
                    }
                    lc3 = 1;
                    for (String s : bparr) {
                        bpMrk += "var markerB" + lc3 + " = new RGraph.Drawing.Text('chart3', line3.coords[" + (bparr.size() - lc3) + "][0], line3.coords[" + (bparr.size() - lc3) + "][1], '" + s + "').Draw();";
                        lc3++;
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            <table id=\"tab12\" class=\"tabpage\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_diagnosis", fileDT, "diagnosis_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countDiag);
      out.write(" time(s) of diagnosis <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>ICD10 Diagnosis</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortDiag, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c1 = 1;
                            for (Date d : sortDiag) {
                                Object r1 = diagnosis.get(d);
                                ArrayList<OntResourceImpl> diaarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    diaarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        diaarr.add(tmpr);
                                    }
                                }
                                for (OntResourceImpl r : diaarr) {
                                    Individual hos = mod.getIndividual(r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of")).toString());
                                    String hosname_diag = "";
                                    if (hos != null) {
                                        hosname_diag = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }
                                    RDFNode diag1 = r.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                    Resource diag2 = r.getPropertyResourceValue(mod.getProperty(doNS + "has_disease"));
                                    String diagname = "", diagnameth = "";
                                    if (diag2 != null) {
                                        com.hp.hpl.jena.rdf.model.Statement diag3 = diag2.asResource().getProperty(mod.getProperty(doNS + "icd10_name"));
                                        diagname = (diag3 != null) ? diag3.getObject().asLiteral().getString() : "";
                                        com.hp.hpl.jena.rdf.model.Statement diag4 = diag2.asResource().getProperty(mod.getProperty(doNS + "icd10_name_thai"));
                                        diagnameth = (diag4 != null) ? diag4.getObject().asLiteral().getString() : "";
                                    }
                                    diagname = (!diagnameth.equals("")) ? diagnameth + "<br/>" + diagname : diagnameth + diagname;
                                    diagname = (diagname.equals("")) ? "-" : diagname;
                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print(c1);
      out.write("</td>\r\n");
      out.write("                    <td><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print((diag1 != null) ? diag1.asLiteral().getString() : "-");
      out.write("</a></td>\r\n");
      out.write("                    <td>");
      out.print(diagname);
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(hosname_diag);
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            c1++;
                        }
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            <table id=\"tab13\" class=\"tabpage\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_drug_prescription", fileDT, "drug_prescription_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countDrug);
      out.write(" time(s) of drug prescription <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>Drug Name</th><th>Amount</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortDrug, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c6 = 1;
                            for (Date d : sortDrug) {
                                Object r1 = drug.get(d);
                                ArrayList<OntResourceImpl> druarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    druarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        druarr.add(tmpr);
                                    }
                                }
                                boolean isFirstRound = true;
                                for (OntResourceImpl r : druarr) {
                                    Individual hos = mod.getIndividual(r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of")).toString());
                                    String hosname_drug = "";
                                    if (hos != null) {
                                        hosname_drug = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }
                                    RDFNode drug1 = r.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                    Resource drug2 = r.getPropertyResourceValue(mod.getProperty(doNS + "to_drug"));
                                    String drugname = "", drugnameth = "";
                                    if (drug2 != null) {
                                        com.hp.hpl.jena.rdf.model.Statement drug3 = drug2.asResource().getProperty(mod.getProperty(doNS + "item_name"));
                                        drugname = (drug3 != null) ? drug3.getObject().asLiteral().getString() : "";
                                        com.hp.hpl.jena.rdf.model.Statement drug4 = drug2.asResource().getProperty(mod.getProperty(doNS + "item_name_thai"));
                                        drugnameth = (drug4 != null) ? drug4.getObject().asLiteral().getString() : "";
                                    }
                                    drugname = (!drugnameth.equals("") && !drugname.equals("")) ? drugnameth + "<br/>" + drugname : drugnameth + drugname;
                                    drugname = (drugname.equals("")) ? "-" : drugname;
                                    RDFNode drug5 = r.getPropertyValue(mod.getProperty(doNS + "amount"));
                                    RDFNode drug6 = r.getPropertyValue(mod.getProperty(doNS + "drug_name_thai"));
                                    String altdrugname = (drug6 != null) ? drug6.asLiteral().getString() : "";
                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    ");
if (isFirstRound) {
      out.write("<td rowspan=\"");
      out.print(druarr.size());
      out.write("\" style=\"vertical-align: top;\">");
      out.print(c6);
      out.write("</td>");
}
      out.write("\r\n");
      out.write("                    ");
if (isFirstRound) {
      out.write("<td rowspan=\"");
      out.print(druarr.size());
      out.write("\" style=\"vertical-align: top;\"><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print((drug1 != null) ? drug1.asLiteral().getString() : "-");
      out.write("</a></td>");
}
      out.write("\r\n");
      out.write("                    <td>");
      out.print(drugname);
      out.print((!drugname.equals(altdrugname)) ? "<br/><span style='font-size:8pt;'>" + altdrugname + "</span>" : "");
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print((drug5 != null) ? drug5.asLiteral().getString() : "-");
      out.write("</td>\r\n");
      out.write("                    ");
if (isFirstRound) {
      out.write("<td rowspan=\"");
      out.print(druarr.size());
      out.write("\" style=\"vertical-align: top;\">");
      out.print(hosname_drug);
      out.write("</td>");
}
      out.write("\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            isFirstRound = false;
                        }
                        c6++;
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            <table id=\"tab14\" class=\"tabpage\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_laboratory", fileDT, "laboratory_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countLab);
      out.write(" time(s) of laboratory <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>Lab. Type</th><th>Result</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortLab, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c4 = 1;
                            for (Date d : sortLab) {
                                Object r1 = lab.get(d);
                                ArrayList<OntResourceImpl> labarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    labarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        labarr.add(tmpr);
                                    }
                                }
                                for (OntResourceImpl r : labarr) {
                                    Individual hos = mod.getIndividual(r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of")).toString());
                                    String hosname_lab = "-";
                                    if (hos != null) {
                                        hosname_lab = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }
                                    RDFNode lab1 = r.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                    RDFNode lab2 = r.getPropertyValue(mod.getProperty(doNS + "lab_code"));
                                    RDFNode lab21 = r.getPropertyValue(mod.getProperty(doNS + "lab_name"));
                                    String labname = (lab2 !=null)?getLabName(lab2.asLiteral().getString()):(lab21!=null)?lab21.asLiteral().getString():"-";
                                    RDFNode lab3 = r.getPropertyValue(mod.getProperty(doNS + "lab_result"));
                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print(c4);
      out.write("</td>\r\n");
      out.write("                    <td><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print((lab1 != null) ? lab1.asLiteral().getString() : "-");
      out.write("</a></td>\r\n");
      out.write("                    <td>");
      out.print(labname);
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print((lab3 != null) ? lab3.asLiteral().getString() : "-");
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(hosname_lab);
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            c4++;
                        }
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            <table id=\"tab15\" class=\"tabpage\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_vaccination", fileDT, "vaccination_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countVacc);
      out.write(" time(s) of vaccination <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>Vaccine</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortVacc, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c3 = 1;
                            for (Date d : sortVacc) {
                                Object r1 = vacc.get(d);
                                ArrayList<OntResourceImpl> vacarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    vacarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        vacarr.add(tmpr);
                                    }
                                }
                                for (OntResourceImpl r : vacarr) {
                                    Individual hos = mod.getIndividual(r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of")).toString());
                                    String hosname_vac = "-";
                                    if (hos != null) {
                                        hosname_vac = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }
                                    RDFNode vac1 = r.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                    Resource vac2 = r.getPropertyResourceValue(mod.getProperty(doNS + "to_vaccine"));
                                    String vacname = "-", vacnameth = "-";
                                    if (vac2 != null) {
                                        com.hp.hpl.jena.rdf.model.Statement diag3 = vac2.asResource().getProperty(mod.getProperty(doNS + "vaccine_name"));
                                        if (diag3 != null) {
                                            vacname = diag3.getObject().asLiteral().getString();
                                        }
                                        com.hp.hpl.jena.rdf.model.Statement diag4 = vac2.asResource().getProperty(mod.getProperty(doNS + "vaccine_name_thai"));
                                        if (diag4 != null) {
                                            vacnameth = diag4.getObject().asLiteral().getString();
                                        }
                                    }
                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print(c3);
      out.write("</td>\r\n");
      out.write("                    <td><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print((vac1 != null) ? vac1.asLiteral().getString() : "-");
      out.write("</a></td>\r\n");
      out.write("                    <td>");
      out.print(vacname);
      out.write(' ');
      out.write('(');
      out.print(vacnameth);
      out.write(")</td>\r\n");
      out.write("                    <td>");
      out.print(hosname_vac);
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            c3++;
                        }
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            ");
if (isFemale) {
      out.write("\r\n");
      out.write("            <table id=\"tab16\" class=\"tabpage\">\r\n");
      out.write("                ");
 state = getUpdateState(props, request.getParameter("id"), "_pregnancy", fileDT, "pregnancy_service");
      out.write("\r\n");
      out.write("                <caption>");
      out.print(countPreg);
      out.write(" time(s) of pregnancy care <span style=\"font-size:12px;\">[ข้อมูลถึงวันที่ ");
      out.print(state);
      out.write("]</span></caption>\r\n");
      out.write("                <tr><th></th><th>Visit Date</th><th>Gravida No.</th><th>Gravida Age</th><th>Gravida Health</th><th>Provider</th></tr>\r\n");
      out.write("                        ");

                            Collections.sort(sortPreg, new Comparator<Date>() {
                                public int compare(Date t, Date t1) {
                                    return t1.compareTo(t);
                                }
                            });
                            int c5 = 1;
                            for (Date d : sortPreg) {
                                Object r1 = preg.get(d);
                                ArrayList<OntResourceImpl> pregarr = new ArrayList<OntResourceImpl>();
                                if (r1.getClass().equals(OntResourceImpl.class)) {
                                    pregarr.add((OntResourceImpl) r1);
                                } else if (r1.getClass().equals(ArrayList.class)) {
                                    ArrayList<OntResourceImpl> tmparr = (ArrayList<OntResourceImpl>) r1;
                                    for (OntResourceImpl tmpr : tmparr) {
                                        pregarr.add(tmpr);
                                    }
                                }
                                for (OntResourceImpl r : pregarr) {
                                    Individual hos = mod.getIndividual(r.getPropertyResourceValue(mod.getProperty(doNS + "activity_of")).toString());
                                    String hosname_preg = "-";
                                    if (hos != null) {
                                        hosname_preg = hos.getPropertyValue(mod.getProperty(doNS + "organization_name")).asLiteral().getString();
                                    }
                                    RDFNode preg1 = r.getPropertyValue(mod.getProperty(doNS + "effective_date"));
                                    RDFNode preg2 = r.getPropertyValue(mod.getProperty(doNS + "gravida_number"));
                                    RDFNode preg3 = r.getPropertyValue(mod.getProperty(doNS + "gravida_age"));
                                    RDFNode preg4 = r.getPropertyValue(mod.getProperty(doNS + "gravida_health"));
                                    String gh = (preg4 != null) ? preg4.asLiteral().getString() : "-";
                        
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print(c5);
      out.write("</td>\r\n");
      out.write("                    <td><a class=\"small pop2\" data-bpopup='{\"contentContainer\":\".content\",\"loadUrl\":\"related_clinical_action.jsp?id=");
      out.print(request.getParameter("id") + "&ind=" + URLEncoder.encode(r.getURI()));
      out.write("\"}' href=\"javascript:void(0);\">");
      out.print((preg1 != null) ? preg1.asLiteral().getString() : "-");
      out.write("</a></td>\r\n");
      out.write("                    <td>");
      out.print((preg2 != null) ? preg2.asLiteral().getString() : "-");
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print((preg3 != null) ? preg3.asLiteral().getString() : "-");
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(getGH(gh));
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(hosname_preg);
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                            c5++;
                        }
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"panel clearleft\">\r\n");
      out.write("            <h6 class=\"large\">Personal Health Statistics</h6>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!--Canvas for line chart-->\r\n");
      out.write("        <h6 class=\"large\" style=\"margin-top:10px;\">Weight Trends</h6>\r\n");
      out.write("        <canvas id=\"chart1\" width=\"");
      out.print((lc1 - 2 > 23) ? (lc1 - 2) * 34 : 800);
      out.write("\" height=\"340\">No canvas support</canvas>\r\n");
      out.write("        <h6 class=\"large\" style=\"margin-top:10px;\">Height Trends</h6>\r\n");
      out.write("        <canvas id=\"chart2\" width=\"");
      out.print((lc2 - 2 > 23) ? (lc2 - 2) * 34 : 800);
      out.write("\" height=\"340\">No canvas support</canvas>\r\n");
      out.write("        <h6 class=\"large\" style=\"margin-top:10px;\">Blood Pressure Trends</h6>\r\n");
      out.write("        <canvas id=\"chart3\" width=\"");
      out.print((lc3 - 2 > 23) ? (lc3 - 2) * 34 : 800);
      out.write("\" height=\"340\">No canvas support</canvas>\r\n");
      out.write("\r\n");
      out.write("        <div id=\"popup2\">\r\n");
      out.write("            <span class=\"button b-close\"><span>X</span></span>\r\n");
      out.write("            <div class=\"content\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <!--Charts script from RGraph-->\r\n");
      out.write("        <script type=\"text/javascript\">\r\n");
      out.write("            window.onload = function() {\r\n");
      out.write("            ");
if (!weightVal.equals("")) {
      out.write("\r\n");
      out.write("                var line1 = new RGraph.Line('chart1', [");
      out.print(weightVal);
      out.write("])\r\n");
      out.write("                        .Set('background.grid', true)\r\n");
      out.write("                        .Set('background.grid.autofit.numvlines', ");
      out.print(lc1 - 2);
      out.write(")\r\n");
      out.write("                        .Set('numxticks', ");
      out.print(lc1 - 2);
      out.write(")\r\n");
      out.write("                        .Set('labels', [");
      out.print(weightLab);
      out.write("])\r\n");
      out.write("                        .Set('text.angle', 20)\r\n");
      out.write("                        .Set('text.size', 9)\r\n");
      out.write("                        .Set('hmargin', 0)\r\n");
      out.write("                        .Set('gutter.top', 20)\r\n");
      out.write("                        .Set('gutter.bottom', 40)\r\n");
      out.write("                        .Set('gutter.left', 80)\r\n");
      out.write("                        .Set('gutter.right', 40)\r\n");
      out.write("                        .Set('background.barcolor1', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('background.barcolor2', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('colors', ['rgba(77,193,238,1)'])\r\n");
      out.write("                        .Set('linewidth', 2)\r\n");
      out.write("                        .Set('tickmarks', 'circle')\r\n");
      out.write("                        .Set('contextmenu', [['Save Chart', RGraph.showPNG], null, ['Cancel', function() {\r\n");
      out.write("                        }]])\r\n");
      out.write("                        .Draw();\r\n");
      out.write("            ");
      out.print(weightMrk);
      out.write("\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("            ");
if (!heightVal.equals("")) {
      out.write("\r\n");
      out.write("                var line2 = new RGraph.Line('chart2', [");
      out.print(heightVal);
      out.write("])\r\n");
      out.write("                        .Set('background.grid', true)\r\n");
      out.write("                        .Set('labels', [");
      out.print(heightLab);
      out.write("])\r\n");
      out.write("                        .Set('background.grid.autofit.numvlines', ");
      out.print(lc2 - 2);
      out.write(")\r\n");
      out.write("                        .Set('numxticks', ");
      out.print(lc2 - 2);
      out.write(")\r\n");
      out.write("                        .Set('text.angle', 20)\r\n");
      out.write("                        .Set('text.size', 9)\r\n");
      out.write("                        .Set('hmargin', 0)\r\n");
      out.write("                        .Set('gutter.top', 20)\r\n");
      out.write("                        .Set('gutter.bottom', 40)\r\n");
      out.write("                        .Set('gutter.left', 80)\r\n");
      out.write("                        .Set('gutter.right', 40)\r\n");
      out.write("                        .Set('background.barcolor1', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('background.barcolor2', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('colors', ['rgba(77,193,238,1)'])\r\n");
      out.write("                        .Set('linewidth', 2)\r\n");
      out.write("                        .Set('tickmarks', 'circle')\r\n");
      out.write("                        .Set('contextmenu', [['Save Chart', RGraph.showPNG], null, ['Cancel', function() {\r\n");
      out.write("                        }]])\r\n");
      out.write("                        .Draw();\r\n");
      out.write("            ");
      out.print(heightMrk);
      out.write("\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("            ");
if (!bpVal.equals("")) {
      out.write("\r\n");
      out.write("                var line3 = new RGraph.Line('chart3', [");
      out.print(bpVal);
      out.write("])\r\n");
      out.write("                        .Set('background.grid', true)\r\n");
      out.write("                        .Set('labels', [");
      out.print(bpLab);
      out.write("])\r\n");
      out.write("                        .Set('background.grid.autofit.numvlines', ");
      out.print(lc3 - 2);
      out.write(")\r\n");
      out.write("                        .Set('numxticks', ");
      out.print(lc3 - 2);
      out.write(")\r\n");
      out.write("                        .Set('text.angle', 20)\r\n");
      out.write("                        .Set('text.size', 9)\r\n");
      out.write("                        .Set('hmargin', 0)\r\n");
      out.write("                        .Set('gutter.top', 20)\r\n");
      out.write("                        .Set('gutter.bottom', 40)\r\n");
      out.write("                        .Set('gutter.left', 80)\r\n");
      out.write("                        .Set('gutter.right', 40)\r\n");
      out.write("                        .Set('background.barcolor1', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('background.barcolor2', 'rgba(255,255,255,1)')\r\n");
      out.write("                        .Set('colors', ['rgba(77,193,238,1)'])\r\n");
      out.write("                        .Set('linewidth', 2)\r\n");
      out.write("                        .Set('tickmarks', 'circle')\r\n");
      out.write("                        .Set('contextmenu', [['Save Chart', RGraph.showPNG], null, ['Cancel', function() {\r\n");
      out.write("                        }]])\r\n");
      out.write("                        .Draw();\r\n");
      out.write("            ");
      out.print(bpMrk);
      out.write("\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("            };\r\n");
      out.write("        </script>\r\n");

        }catch (WrappedIOException e){
            out.print("<body><h1>ไม่พบไฟล์ข้อมูล</h1>");
        }

      out.write("\r\n");
      out.write("        <script src=\"jslibraries/jquery.min.js\"></script>\r\n");
      out.write("        <script src=\"jslibraries/jquery.bpopup-0.9.4.min.js\"></script>\r\n");
      out.write("        <script src=\"jslibraries/jquery.easing.1.3.js\"></script>\r\n");
      out.write("        <script src=\"jslibraries/scripting.min.js\"></script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
