/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2016-01-13 13:44:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kku.cs.smil.sidi.bigdata.Connector;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import java.io.FileOutputStream;
import java.io.File;
import com.hp.hpl.jena.ontology.Individual;
import java.util.Iterator;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import h2s.BDecoder;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.util.Properties;
import java.util.Date;
import java.text.SimpleDateFormat;
import org.w3c.dom.Node;
import java.util.List;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.engine.binding.Binding;
import com.hp.hpl.jena.query.ResultSetFactory;
import java.net.URLEncoder;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.TreeMap;

public final class quick_005fsearch_005fsubmit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/header2.html", Long.valueOf(1451371349223L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"css-style1.css\"/>\n");
      out.write("        <link rel=\"stylesheet\" href=\"style-header.css\"/>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            .analytic_btn {width:24px;vertical-align: middle;margin-left: 4px;cursor: pointer;}\n");
      out.write("            table {border-collapse:collapse;margin:20px;}\n");
      out.write("            td,th {border:1px solid gray;padding:5px;}\n");
      out.write("            th {background-color: lightgray;}\n");
      out.write("        </style>\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");
      out.write("<!--\r\n");
      out.write("To change this template, choose Tools | Templates\r\n");
      out.write("and open the template in the editor.\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<div class=\"header menubar\">\r\n");
      out.write("    <div class=\"search_holder right\"><input class=\"short\" type=\"text\" placeholder=\"Search site\"/><input type=\"button\" class=\"button search\"/></div>\r\n");
      out.write("    <div class=\"headline left\">\r\n");
      out.write("        <h1 class=\"title\">Healthcare Information Center</h1>\r\n");
      out.write("        <h2 class=\"subtitle left right_radius\">Nongbuarawae Hospital</h2>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"menu left left_radius\" onclick=\"window.location.href = 'index.jsp';\">Home</div>\r\n");
      out.write("    <div class=\"menu left right_radius\" onclick=\"window.location.href = 'semantic_search.jsp';\">Search & Analytics</div>\r\n");
      out.write("</div>\r\n");
      out.write("\n");
      out.write("        ");

            request.setCharacterEncoding("UTF-8");
            Properties props = new Properties();
            props.load(getServletContext().getResourceAsStream("WEB-INF/config.properties"));

            String where = (request.getParameter("by").equals("citizen_id"))?"FILTER (?" + request.getParameter("by") + "=\"" + request.getParameter("keyword") + "\")":"FILTER REGEX(?" + request.getParameter("by") + ",\"" + request.getParameter("keyword") + "\",\"i\")";
            String fullsparql = "{SELECT ?x ?x1 ?citizen_id ?patient_code ?given_name ?family_name WHERE { ?x1 dom:citizen_id ?citizen_id. OPTIONAL{?x1 dom:patient_code ?patient_code.} OPTIONAL {?x1 dom:given_name ?given_name.} OPTIONAL{?x1 dom:family_name ?family_name.}}}";

            fullsparql = "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \r\n"
                    + "PREFIX dom: <http://202.28.94.50/ontologies/healthcare/hl7.owl#> \r\n"
                    + "PREFIX owl: <http://www.w3.org/2002/07/owl#> \r\n"
                    + "SELECT ?x1 ?citizen_id ?patient_code ?given_name ?family_name\r\n"
                    + "WHERE \r\n"
					+ "{\n"
					+ "{SELECT ?x1 WHERE {?x1 dom:"+request.getParameter("by")+" \""+request.getParameter("keyword")+"\".}}"
					+ "{SELECT ?x1 ?x WHERE {?x1 ^owl:sameAs ?x.}}"
					+ "{SELECT ?x1 ?x WHERE {?x rdf:type dom:Patient.}}"
                    + fullsparql
					+ "}\n";
            fullsparql = fullsparql.replace("{", "{\r\n ").replace(". ", ".\r\n ").replace("}", "\r\n}");
        
      out.write("\n");
      out.write("        <!--<textarea class=\"left clearleft\">");
      out.print(fullsparql);
      out.write("</textarea>-->\n");
      out.write("\n");
      out.write("        ");

            String fullmsg = "query=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
            Socket sock = new Socket(props.getProperty("rdf_host"), Integer.parseInt(props.getProperty("rdf_port")));
            String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
                    + "Host: " + props.getProperty("rdf_host") + ":" + props.getProperty("rdf_port") + "\r\n"
                    + "Content-Length: " + fullmsg.length() + "\r\n"
                    + "Content-Type: application/x-www-form-urlencoded\r\n"
                    + "\r\n"
                    + fullmsg;
            PrintWriter os = new PrintWriter(sock.getOutputStream());
            os.println(msg);
            os.flush();

            InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
            BufferedReader br = new BufferedReader(is);
            String outmsg = "";
            String line;
            while ((line = br.readLine()) != null) {
                outmsg += line;
            }

            os.close();
            is.close();
            sock.close();


        
      out.write("\n");
      out.write("\n");
      out.write("        <!--<textarea class=\"left\" rows=\"20\" cols=\"80\">");
      out.print(outmsg);
      out.write("</textarea>-->\n");
      out.write("\n");
      out.write("        <!--Save Result Form-->\n");
      out.write("        ");

            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dt = formatter.format(new Date());
        
      out.write("\n");
      out.write("        <form style=\"display:none;margin-top: 20px;margin-left: 20px;\" class=\"left\" id=\"save_analytic\" name=\"save_result\" action=\"semantic_search_save.jsp\" method=\"post\">\n");
      out.write("            <input type=\"text\" name=\"datetime\" value=\"");
      out.print(dt);
      out.write("\"/>\n");
      out.write("            <input type=\"text\" name=\"username\" value=\"");
      out.print(session.getAttribute("username"));
      out.write("\"/>\n");
      out.write("            <input type=\"text\" name=\"label\" value=\"\"/>\n");
      out.write("            <input type=\"text\" name=\"action\" value=\"insert\"/>\n");
      out.write("            <input type=\"text\" name=\"table\" value=\"analytic\"/>\n");
      out.write("            <textarea name=\"sparql\">");
      out.print(fullsparql);
      out.write("</textarea>\n");
      out.write("        </form>\n");
      out.write("        ");

            BDecoder decoder = new BDecoder();
            com.hp.hpl.jena.query.ResultSet results = ResultSetFactory.fromXML("<?xml version=" + outmsg.split("<?xml version=")[1]);
        
      out.write("\n");
      out.write("        <!--Start show reports-->\n");
      out.write("        <h6 style=\"\">Patient Search Results:</h6>\n");
      out.write("        <table class=\"clearleft\">\n");
      out.write("            ");

                if ((request.getParameter("database") != null && request.getParameter("database").equals("true"))) {// If there are no records stored in RDF store, call Web Services to retrieve patients records.
                    String ns1 = "http://202.28.94.50/ontologies/healthcare/hl7.owl#";
                    String ns = "http://202.28.94.50/ontologies/healthcare/data/" + request.getParameter("by") + ".owl#";
                    OntModel mod = ModelFactory.createOntologyModel();
                    mod.read(props.getProperty("domain_ontology"));
                    OntModel dat = ModelFactory.createOntologyModel();
                    Individual ind = dat.createIndividual(ns + "_" + request.getParameter("keyword"), mod.getOntClass(ns1 + "Patient"));
                    ind.addProperty(mod.getProperty(ns1 + request.getParameter("by")), URLEncoder.encode(request.getParameter("keyword").trim()));

                    //Start WSExecution
                    String sidi_path = props.getProperty("sidi_path");
                    OntModel mod2 = ModelFactory.createOntologyModel();
                    mod2.read("file:/" + sidi_path + "/composition3.owl");
                    mod2.read("file:/" + sidi_path + "/composition3-profile.owl");
                    mod2.read(props.getProperty("domain_ontology"));
                    kku.cs.smil.sidi.WSExecutionFast wse = new kku.cs.smil.sidi.WSExecutionFast(dat, null, mod2, request.getParameter("by") + ".owl");
                    wse.execute(wse.getProcessSequenceInd(props.getProperty("listby_" + request.getParameter("by") + "_service")));
                    OntModel res = wse.getData();
                    Iterator<Individual> inds = res.listIndividuals(mod.getOntClass(ns1 + "Patient"));

                    //Print table header
                    out.println("<tr><td>#</td><td>CITIZEN ID</td><td>HN</td><td>GIVEN NAME</td><td>FAMILY NAME</td></tr>");
                    out.println("<tr>");

                    int cnt = 1;
                    while (inds.hasNext()) {
                        //Write each individual of patient record into raw data file
                        Individual obj = inds.next();
                        RDFNode nd1 = obj.getPropertyValue(mod.getProperty(ns1 + "citizen_id"));
                        RDFNode nd2 = obj.getPropertyValue(mod.getProperty(ns1 + "organization_code"));
                        RDFNode nd3 = obj.getPropertyValue(mod.getProperty(ns1 + "patient_code"));
                        RDFNode nd4 = obj.getPropertyValue(mod.getProperty(ns1 + "given_name"));
                        RDFNode nd5 = obj.getPropertyValue(mod.getProperty(ns1 + "family_name"));
                        if (nd1 != null && nd2 != null && nd3 != null & nd4 != null && nd5 != null) {
                            String cid = nd1.asLiteral().getString();
                            String hid = nd2.asLiteral().getString();
                            if (!cid.trim().equals("")) {
                                //Show results on screen
                                out.println("<td><a href='javascript: void(0);' onclick=\"window.open('patient_document.jsp?id=" + cid + "');\">" + cnt + "</a></td>");
                                out.println("<td>" + cid + "</td>");
                                out.println("<td>" + nd3.asLiteral().getString() + "</td>");
                                out.println("<td>" + nd4.asLiteral().getString() + "</td>");
                                out.println("<td>" + nd5.asLiteral().getString() + "</td>");
                                cnt++;

                                //Create new rawdata file if there is not exists.
                                OntModel modw = ModelFactory.createOntologyModel();
                                ArrayList<String> sArr = new ArrayList<String>();
                                File f = new File("/"+props.getProperty("sidi_path") + "/rawdata/" + cid + ".owl");
								if(f.exists()&&cnt>2){
									modw.read("file:/"+props.getProperty("sidi_path") + "/rawdata/" + cid + ".owl");
								}
                                Individual newobj = modw.createIndividual("http://202.28.94.50/ontologies/healthcare/data/" + cid + ".owl#_" + cid + "_" + hid, mod.getOntClass(ns1 + "Patient"));

                                StmtIterator it = obj.listProperties();
                                while (it.hasNext()) {
                                    com.hp.hpl.jena.rdf.model.Statement stmt = it.next();
                                    modw.add(newobj, stmt.getPredicate(), stmt.getObject());
                                    String o = null;
                                    if (stmt.getObject().isLiteral()) {
                                        String xsdt = stmt.getObject().asLiteral().getDatatypeURI().split("#")[1];
                                        o = (xsdt.equals("string")) ? "\"" + stmt.getObject().asLiteral().getString() + "\"" : "\"" + stmt.getObject().asLiteral().getString() + "\"^^xsd:" + xsdt;
                                    } else {
                                        o = "<" + stmt.getObject().asResource().getURI() + ">";
                                    }
                                    if (o != null) {
                                        sArr.add("<" + newobj.getURI() + "> <" + stmt.getPredicate().getURI() + "> " + o);
                                    }
                                }

                                FileOutputStream fos = new FileOutputStream(f);
                                modw.write(fos);
                                fos.close();

                                File f2 = new File("/"+props.getProperty("sidi_path") + "/data/" + cid + ".owl");
                                fos = new FileOutputStream(f2);
                                modw.write(fos);
                                fos.close();

                                //Insert data to RDF store
                                String[] rdfdat = new String[sArr.size()];
                                sArr.toArray(rdfdat);
                                Connector con = new Connector(props.getProperty("rdf_host"), Integer.parseInt(props.getProperty("rdf_port")));
                                con.insertData(rdfdat);
                            }
                        }

                        //Print end row
                        out.println("</tr>");
                    }
                } else {// Find patients records from RDF store?
                    List<String> vars = results.getResultVars();
                    out.println("<tr>");
                    for (String v : vars) {
                        if (!v.equals("x1")) {
                            String colname = v;
                            out.println("<th>" + colname + "</th>");
                        } else {
                            out.println("<th>#</th>");
                        }
                    }
                    out.println("</tr>");
                    int rcount = 1;
                    while (results.hasNext()) {
                        Binding bi = results.nextBinding();
                        String pid = "";
                        String firstCol = "";
                        String restCols = "";
                        for (String v : vars) {
                            com.hp.hpl.jena.graph.Node n = bi.get(Var.alloc(v));
                            Object obj = (n!=null&&n.isLiteral()) ? n.getLiteral().getValue() : n;
                            if (!v.equals("x1")) {
                                String objStr = (obj != null) ? obj.toString().replace("\"", "").trim() : "-";
                                if (v.equals("citizen_id")) {
                                    pid = objStr;
                                }
                                restCols += "<td>" + decoder.bdtothai(objStr) + "</td>";
                            }
                        }
                        firstCol += "<td><a href='javascript: void(0);' onclick=\"window.open('patient_document.jsp?id=" + pid + "');\">" + rcount + "</a></td>";
                        out.println("<tr>" + firstCol + restCols + "</tr>");
                        rcount++;
                    }
                }
            
      out.write("\n");
      out.write("        </table>        <!--If there are records from RDF store-->\n");
      out.write("        <form class=\"clearleft\" style=\"margin-left:20px;\" id=\"data_retrieve_form\" name=\"data_retrieve_form\" action=\"\" method=\"post\">\n");
      out.write("            <input type=\"hidden\" name=\"by\" value=\"");
      out.print(request.getParameter("by"));
      out.write("\"/>\n");
      out.write("            <input type=\"hidden\" name=\"keyword\" value=\"");
      out.print(request.getParameter("keyword"));
      out.write("\"/>\n");
      out.write("            <input type=\"hidden\" name=\"database\" value=\"true\"/>\n");
      out.write("            <!--<button type=\"submit\" onmouseover=\"this.style.cursor = 'pointer';\">ค้นหาจากฐานข้อมูลจริง</button>-->\n");
      out.write("        </form>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
