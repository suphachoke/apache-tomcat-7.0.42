/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2015-11-25 16:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.StringWriter;
import com.hp.hpl.jena.graph.impl.LiteralLabelFactory;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.impl.LiteralImpl;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.ResourceFactory;
import com.hp.hpl.jena.rdf.model.impl.ResourceImpl;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.engine.binding.Binding;
import com.hp.hpl.jena.query.ResultSetFactory;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.net.Socket;
import java.util.Properties;

public final class execWSC_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String callBigdata(String sparql, String ontons, Properties prop, String action, boolean shortMsg) throws IOException {

        String fullsparql = (shortMsg) ? "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n"
                : "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \r\n"
                + "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n"
                + "PREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n"
                + "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n"
                + "PREFIX wn: <http://wordnet.princeton.edu/word#> \r\n"
                + "PREFIX wns: <http://wordnet.princeton.edu/schema#> \r\n"
                + "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n";

        String fullmsg = action + "=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
        Socket sock = new Socket(prop.getProperty("rdf_host"), Integer.parseInt(prop.getProperty("rdf_port")));
        String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
                + "Host: " + prop.getProperty("rdf_host") + ":" + prop.getProperty("rdf_port") + "\r\n"
                + "Content-Length: " + fullmsg.length() + "\r\n"
                + "Content-Type: application/x-www-form-urlencoded\r\n"
                + "\r\n"
                + fullmsg;
        PrintWriter os = new PrintWriter(sock.getOutputStream());
        os.println(msg);
        os.flush();

        InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
        BufferedReader br = new BufferedReader(is);
        String outmsg = "";
        String line;
        while ((line = br.readLine()) != null) {
            outmsg += line;
        }

        os.close();
        is.close();
        sock.close();

        return outmsg;
    }

    public ArrayList<String> BFS(String u, String v, String ontons, Properties prop) throws IOException {
        ArrayList<String> P = new ArrayList<String>();
        ArrayList<String> V = new ArrayList<String>();
        ArrayList<String> Q = new ArrayList<String>();
        V.add(u);
        Q.add(u);
        HashMap<String, ArrayList<String>> M = new HashMap<String, ArrayList<String>>();
        P.add(u);
        M.put(u, P);
        while (Q.size() > 0) {
            String t = Q.get(0);
            Q.remove(t);
            P = M.get(t);
            if (t.equals(v)) {
                return P;
            }
			String[] earr = (V.size()==1)?adjacentArc(t, ontons, prop, 0):adjacentArc(t, ontons, prop, 1);
            for (String e : earr) {
                ArrayList<String> Pi = (ArrayList<String>) P.clone();
                String ui = headVertex(e, ontons, prop);
                Pi.add(e);
                Pi.add(ui);
                M.put(ui, Pi);
                if (!V.contains(ui)) {
                    V.add(ui);
                    Q.add(ui);
                }
            }
        }
        return null;
    }

    public String[] adjacentArc(String t, String ontons, Properties prop, int limit) throws IOException {
        String[] ret = null;
        String out = (limit>0)?callBigdata("SELECT ?s WHERE {?s wse:tail <" + t + ">.} LIMIT "+limit, ontons, prop, "query", false)
			:callBigdata("SELECT ?s WHERE {?s wse:tail <" + t + ">.}", ontons, prop, "query", false);
        com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out.split("<?xml version=")[1]);
        ArrayList arr = new ArrayList();
        while (cres.hasNext()) {
            String u = cres.nextBinding().get(Var.alloc("s")).toString();
            if (!arr.contains(u)) {
                arr.add(u);
            }
        }
        ret = new String[arr.size()];
        arr.toArray(ret);
        return ret;
    }

    public String headVertex(String e, String ontons, Properties prop) throws IOException {
        String ret = null;
        String out = callBigdata("SELECT ?s WHERE {<" + e + "> wse:head ?s.}", ontons, prop, "query", false);
        com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out.split("<?xml version=")[1]);
        if (cres.hasNext()) {
            String u = cres.nextBinding().get(Var.alloc("s")).toString();
            ret = u;
        }
        return ret;
    }

    public String renderTextCP(String nd, int i, int j, int size) {
        String ext = nd.split("#")[1];
        if (j == 0) {
            ext = "-->(" + ext;
        }
        if (j > 0) {
            ext = "|" + ext;
        }
        if (j == size) {
            ext += ")-->";
        }
        return ext;
    }

    public String renderSvgCP(String nd, int i, int j, int size, int max) {
        double mul = (((double) max - (double) size) / 2);
        double rad1 = (((double) (((j * 40) + 15) + (mul * 40)) - (double) ((((max * 40) / 2) + 15))) / 50) * 45;
        String radXY1 = ((((i - 1) * 150) + 50) + 10) + " " + (((j * 40) + 15) + (mul * 40));
        double rad2 = (((double) ((((max * 40) / 2) + 15)) - (double) (((j * 40) + 15) + (mul * 40))) / 50) * 45;
        String radXY2 = ((((i - 1) * 150) + 300)) + " " + (((max * 40) / 2) + 15);
        String ret = "<g><line x1='" + (((i - 1) * 150) + 10) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((max * 40) / 2) + 15) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<g transform='rotate(" + rad1 + " " + radXY1 + ")'><line x1='" + ((((i - 1) * 150) + 50) + 2) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((j * 40) + 10) + (mul * 40)) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<line x1='" + ((((i - 1) * 150) + 50) + 2) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((j * 40) + 20) + (mul * 40)) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/></g>"
                + "<rect x='" + ((((i - 1) * 150) + 50) + 10) + "' y='" + ((j * 40) + (mul * 40)) + "' width='200' height='30' style='fill:rgb(200,200,255);stroke-width:1;stroke:rgb(0,0,0);overflow:hidden;'></rect>"
                + "<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd) + "' target='_blank'>"
                + "<text font-family='Verdana' font-size='11' x='" + (((((i - 1) * 150) + 5) + 50) + 10) + "' y='" + (((j * 40) + 21) + (mul * 40)) + "' fill='black'>" + nd.split("#")[1] + "</text></a></g>"
                + "<line x1='" + ((((i - 1) * 150) + 250) + 10) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((j * 40) + 15) + (mul * 40)) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<g transform='rotate(" + rad2 + " " + radXY2 + ")'><line x1='" + ((((i - 1) * 150) + 300) - 8) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((max * 40) / 2) + 10) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<line x1='" + ((((i - 1) * 150) + 300) - 8) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((max * 40) / 2) + 20) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/></g>";
        if (j == 0) {

        }
        if (j > 0) {

        }
        if (j == size) {

        }
        return ret;
    }

    public String renderTextP(ArrayList<ArrayList<String>> nd) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            for (int j = 0; j < nd.get(i).size(); j++) {
                ret += (ret.equals("")) ? nd.get(i).get(j).split("#")[1] : "," + nd.get(i).get(j).split("#")[1];
            }
        }
        return ret;
    }

    public String renderSvgP(ArrayList<ArrayList<String>> nd, int k, int max) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            for (int j = 0; j < nd.get(i).size(); j++) {
                ret += (ret.equals("")) ? "<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd.get(i).get(j)) + "' target='_blank'>" + nd.get(i).get(j).split("#")[1] + "</a>" : ",<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd.get(i).get(j)) + "' target='_blank'>" + nd.get(i).get(j).split("#")[1] + "</a>";
            }
        }
        int textPos = ((k / 2) % 2 == 0) ? 50 : 70;
        ret = "<g><circle cx='" + ((k * 150) + 5) + "' cy='" + (((max * 40) / 2) + 15) + "' r='4' stroke='black' stroke-width='1' fill='red'/>"
                + "<line x1='" + ((k * 150) + 5) + "' x2='" + ((k * 150) + 5) + "' y1='" + (((max * 40) / 2) + 20) + "' y2='" + ((max * 40) + textPos - 10) + "' style='stroke:rgb(0,0,0);stroke-width:1;stroke-dasharray:2,2'/>"
                + "<text font-family='Verdana' font-size='11' x='" + ((k * 150) + 5) + "' y='" + ((max * 40) + textPos) + "' fill='black'>" + ret + "</text></g>";
        return ret;
    }

    public String renderPath(ArrayList<String> nd) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            String atom = "<a href='javascript:void(0);' onclick=\"window.open('linkedData.jsp?&id=" + URLEncoder.encode(nd.get(i)) + "')\">" + nd.get(i).split("#")[1] + "</a>";
            ret += (ret.equals("")) ? atom : "-->" + atom;
        }
        return ret;
    }

    public Individual getRecentSPJBag(OntModel mod, OntModel schema, Individual seqnd) {
        Individual ret = null;
        String process = "http://202.28.94.50/owl-s/1.1/mod/Process.owl#",
                list = "http://www.daml.org/services/owl-s/1.1/generic/ObjectList.owl#";
        Individual ndList = mod.getIndividual(seqnd.getPropertyResourceValue(schema.getProperty(process + "components")).getURI());
        Individual spj = mod.getIndividual(ndList.getPropertyResourceValue(schema.getProperty(list + "first")).getURI());
        Resource ndNextSeq = ndList.getPropertyResourceValue(schema.getProperty(list + "rest"));
        if (ndNextSeq != null) {
            ret = getRecentSPJBag(mod, schema, mod.getIndividual(ndNextSeq.getURI()));
        } else {
            Resource nn = spj.getPropertyResourceValue(schema.getProperty(process + "components"));
            ret = mod.getIndividual(nn.getURI());
        }
        return ret;
    }

    public Individual getRecentSeqList(OntModel mod, OntModel schema, Individual cpnd) {
        Individual ret = null;
        String process = "http://202.28.94.50/owl-s/1.1/mod/Process.owl#",
                list = "http://www.daml.org/services/owl-s/1.1/generic/ObjectList.owl#";
		Resource nd = cpnd.getPropertyResourceValue(schema.getProperty(process + "composedOf"));
		if(nd!=null){
			Individual seqnd = mod.getIndividual(nd.getURI());
			Individual ndList = mod.getIndividual(seqnd.getPropertyResourceValue(schema.getProperty(process + "components")).getURI());
			Resource ndNextSeq = ndList.getPropertyResourceValue(schema.getProperty(list + "rest"));
			if (ndNextSeq != null) {
				ret = getRecentSeqList(mod, schema, mod.getIndividual(ndNextSeq.getURI()));
			} else {
				ret = ndList;
			}
		}
        return ret;
    }

    public void extendSPJ(OntModel targetMod, String targetCP, String p, int idx, OntModel schema, String ns, Properties prop) {
        String process = "http://202.28.94.50/owl-s/1.1/mod/Process.owl#",
                grounding = "http://202.28.94.50/owl-s/1.1/mod/Grounding.owl#",
                list = "http://www.daml.org/services/owl-s/1.1/generic/ObjectList.owl#";

        Individual cp = targetMod.getIndividual(targetCP);
		if(cp!=null){
			Resource seqR = cp.getPropertyResourceValue(schema.getProperty(process + "composedOf"));
			Individual seq = targetMod.getIndividual(seqR.getURI());
			Individual recentSPJBag = getRecentSPJBag(targetMod, schema, seq);
			Individual perform = targetMod.createIndividual(recentSPJBag.getURI() + "_Perform" + idx, schema.getOntClass(process + "Perform"));
			recentSPJBag.addProperty(schema.getProperty(list + "first"), perform);
			Individual ap = targetMod.createIndividual(p, schema.getOntClass(process + "AtomicProcess"));
			perform.addProperty(schema.getProperty(process + "process"), ap);
			Individual apg = targetMod.createIndividual(p + "_Grounding", schema.getOntClass(grounding + "WsdlAtomicProcessGrounding"));
			apg.addProperty(schema.getProperty(grounding + "owlsProcess"), ap);
			Individual op = targetMod.createIndividual(p + "_oper", schema.getOntClass(grounding + "WsdlOperationRef"));
			apg.addProperty(schema.getProperty(grounding + "wsdlOperation"), op);
			String opname = "";
			try {
				String out1 = callBigdata("SELECT ?s WHERE {<" + p + "> wse:wsdlOperation ?s.}", ns, prop, "query", false);
				com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
				if (cres.hasNext()) {
					opname = cres.nextBinding().get(Var.alloc("s")).getLiteralLexicalForm();
					op.addProperty(schema.getProperty(grounding + "operation"), ResourceFactory.createPlainLiteral(p.split("#")[0] + "#" + opname));
				}
			} catch (Exception e) {

			}
			if (opname.equals("")) {
				op.addProperty(schema.getProperty(grounding + "operation"), ResourceFactory.createPlainLiteral(p));
			}

			ArrayList<String> ins = new ArrayList<String>();//input
			ArrayList<String> outs = new ArrayList<String>();//output
			try {
				String out1 = callBigdata("SELECT ?s WHERE {<" + p + "> wse:hasInput ?s.}", ns, prop, "query", false);
				com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
				while (cres.hasNext()) {
					String u = cres.nextBinding().get(Var.alloc("s")).toString();
					ins.add(u);
				}
				out1 = callBigdata("SELECT ?s WHERE {<" + p + "> wse:hasOutput ?s.}", ns, prop, "query", false);
				cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
				while (cres.hasNext()) {
					String u = cres.nextBinding().get(Var.alloc("s")).toString();
					outs.add(u);
				}
			} catch (Exception e) {

			}

			for (String i : ins) {
				String u = "";
				Individual ipa = targetMod.createIndividual(ap.getURI() + "_" + i.split("#")[1], schema.getOntClass(process + "Input"));
				Individual ipg = targetMod.createIndividual(ap.getURI() + "_" + i.split("#")[1] + "_map", schema.getOntClass(grounding + "WsdlInputMessageMap"));
				ipg.addProperty(schema.getProperty(grounding + "owlsParameter"), ipa);
				try {
					String out1 = callBigdata("SELECT ?s WHERE {<" + i + "> wse:parameterClassType ?s.}", ns, prop, "query", false);
					com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
					if (cres.hasNext()) {
						u = cres.nextBinding().get(Var.alloc("s")).toString();
						ipa.addProperty(schema.getProperty(process + "parameterClassType"), ResourceFactory.createResource(u));
					} else {
						out1 = callBigdata("SELECT ?s WHERE {<" + i + "> wse:parameterType ?s.}", ns, prop, "query", false);
						cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
						if (cres.hasNext()) {
							u = cres.nextBinding().get(Var.alloc("s")).toString();
							ipa.addProperty(schema.getProperty(process + "parameterType"), ResourceFactory.createResource(u));
						}
					}
				} catch (Exception e) {

				}
				if (u.equals("")) {
					ipa.addProperty(schema.getProperty(process + "parameterType"), ResourceFactory.createResource(i));
				}

				String m = "";
				try {
					String out1 = callBigdata("SELECT ?s WHERE {<" + i + "> wse:wsdlMessagePart ?s.}", ns, prop, "query", false);
					com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
					if (cres.hasNext()) {
						m = cres.nextBinding().get(Var.alloc("s")).getLiteralLexicalForm();
						ipg.addProperty(schema.getProperty(grounding + "wsdlMessagePart"), ResourceFactory.createPlainLiteral(m));
					}
				} catch (Exception e) {

				}
				if (m.equals("")) {
					ipg.addProperty(schema.getProperty(grounding + "wsdlMessagePart"), ResourceFactory.createPlainLiteral(i.split("#")[1]));
				}
				ap.addProperty(schema.getProperty(process + "hasInput"), ipa);
				apg.addProperty(schema.getProperty(grounding + "wsdlInput"), ipg);
			}

			for (String o : outs) {
				String u = "";
				Individual opa = targetMod.createIndividual(ap.getURI() + "_" + o.split("#")[1], schema.getOntClass(process + "Output"));
				Individual opg = targetMod.createIndividual(ap.getURI() + "_" + o.split("#")[1] + "_map", schema.getOntClass(grounding + "WsdlOutputMessageMap"));
				opg.addProperty(schema.getProperty(grounding + "owlsParameter"), opa);
				try {
					String out1 = callBigdata("SELECT ?s WHERE {<" + o + "> wse:parameterClassType ?s.}", ns, prop, "query", false);
					com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
					if (cres.hasNext()) {
						u = cres.nextBinding().get(Var.alloc("s")).toString();
						opa.addProperty(schema.getProperty(process + "parameterClassType"), ResourceFactory.createResource(u));
					} else {
						out1 = callBigdata("SELECT ?s WHERE {<" + o + "> wse:parameterType ?s.}", ns, prop, "query", false);
						cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
						if (cres.hasNext()) {
							u = cres.nextBinding().get(Var.alloc("s")).toString();
							opa.addProperty(schema.getProperty(process + "parameterType"), ResourceFactory.createResource(u));
						}
					}
				} catch (Exception e) {

				}
				if (u.equals("")) {
					opa.addProperty(schema.getProperty(process + "parameterType"), ResourceFactory.createResource(o));
				}

				String m = "";
				try {
					String out1 = callBigdata("SELECT ?s WHERE {<" + o + "> wse:wsdlMessagePart ?s.}", ns, prop, "query", false);
					com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
					if (cres.hasNext()) {
						m = cres.nextBinding().get(Var.alloc("s")).getLiteralLexicalForm();
						opg.addProperty(schema.getProperty(grounding + "wsdlMessagePart"), ResourceFactory.createPlainLiteral(m));
					}
				} catch (Exception e) {

				}
				if (m.equals("")) {
					opg.addProperty(schema.getProperty(grounding + "wsdlMessagePart"), ResourceFactory.createPlainLiteral(o.split("#")[1]));
				}
				ap.addProperty(schema.getProperty(process + "hasOutput"), opa);
				apg.addProperty(schema.getProperty(grounding + "wsdlOutput"), opg);
			}
		}
    }


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Web Services Composition Management System</title>\n");
      out.write("        <meta charset=\"utf-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("\n");
      out.write("        <link rel=\"stylesheet\" href=\"js/libs/bootstrap-3.2.0-dist/css/bootstrap.min.css\"/>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            .textbox{width:100%;}\n");
      out.write("            .panel-heading a:after {\n");
      out.write("                font-family: 'Glyphicons Halflings';\n");
      out.write("                content: \"\\e114\";\n");
      out.write("                float: right;\n");
      out.write("                color: grey;\n");
      out.write("            }\n");
      out.write("            .panel-heading a.collapsed:after {\n");
      out.write("                content: \"\\e080\";\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    ");

		long startT = System.currentTimeMillis();
        Properties prop = new Properties();
        prop.load(getServletContext().getResourceAsStream("/WEB-INF/config.properties"));

        String redirect = "index.jsp";
        String outmsg = "";
        String ns = "";
        ArrayList<String> inArr = new ArrayList<String>();
        String[] inS;
        ArrayList<String> outArr = new ArrayList<String>();
        String[] outS;
        //HashMap<String, String> rules = new HashMap<String, String>();
        ArrayList<String> inArrMatch = new ArrayList<String>();
        ArrayList<String> outArrMatch = new ArrayList<String>();
        boolean chkParam = false;
        boolean chkParamI = false;
        boolean chkParamO = false;
        String profile = "http://202.28.94.50/owl-s/1.1/mod/Profile.owl#",
                process = "http://202.28.94.50/owl-s/1.1/mod/Process.owl#",
                grounding = "http://202.28.94.50/owl-s/1.1/mod/Grounding.owl#",
                list = "http://www.daml.org/services/owl-s/1.1/generic/ObjectList.owl#";
        OntModel schema = ModelFactory.createOntologyModel();
        schema.read("http://202.28.94.50/owl-s/1.1/mod/Process.owl");
        schema.read("http://202.28.94.50/owl-s/1.1/mod/Grounding.owl");
        String dtStr = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        if (request.getParameter("ontons") != null && !request.getParameter("ontons").equals("none")) {
            ns = request.getParameter("ontons");

            for (String s : request.getParameterValues("input")) {
                if (!s.equals("")) {
                    chkParamI = true;
                    String param = s.replaceAll("[^a-z A-Z 0-9]|\\s", "__")
                            .replaceAll("(.)([A-Z 0-9])([^A-Z 0-9])", "$1__$2$3")
                            .replaceAll("([^A-Z 0-9 _])([A-Z 0-9])(.)", "$1__$2$3")
                            .toLowerCase()
                            .replaceAll("(^of_)|(^with_)|(^a_)|(^an_)|(^the_)|(_of_)|(_with_)|(_a_)|(_an_)|(_the_)|(_of$)|(_with$)|(_a$)|(_an$)|(_the$)", "")
                            .replaceAll("_+", "_").replaceAll("^_", "").replaceAll("_$", "");
                    for (String pa : param.split("_")) {
                        if (!inArr.contains(pa)) {
                            inArr.add(pa);
                        }
                    }
                    if (!inArr.contains(param)) {
                        inArr.add(param);
                    }
                    //inArrMatch.add(ns + "#" + param);
                }
            }
            for (String s : request.getParameterValues("output")) {
                if (!s.equals("")) {
                    chkParamO = true;
                    String param = s.replaceAll("[^a-z A-Z 0-9]|\\s", "__")
                            .replaceAll("(.)([A-Z 0-9])([^A-Z 0-9])", "$1__$2$3")
                            .replaceAll("([^A-Z 0-9 _])([A-Z 0-9])(.)", "$1__$2$3")
                            .toLowerCase()
                            .replaceAll("(^of_)|(^with_)|(^a_)|(^an_)|(^the_)|(_of_)|(_with_)|(_a_)|(_an_)|(_the_)|(_of$)|(_with$)|(_a$)|(_an$)|(_the$)", "")
                            .replaceAll("_+", "_").replaceAll("^_", "").replaceAll("_$", "");
                    for (String pa : param.split("_")) {
                        if (!outArr.contains(pa)) {
                            outArr.add(pa);
                        }
                    }
                    if (!outArr.contains(param)) {
                        outArr.add(param);
                    }
                    //outArrMatch.add(ns + "#" + param);
                }
            }

            chkParam = chkParamI & chkParamO;
            if (chkParam) {
            }

            inS = new String[inArr.size()];
            inArr.toArray(inS);
            outS = new String[outArr.size()];
            outArr.toArray(outS);
            session.setAttribute("input", inS);
            session.setAttribute("output", outS);
            session.setAttribute("ontons", ns);
            session.setAttribute("method", request.getParameter("method"));

            outmsg += "<h3>Input</h3><ul>";
            for (String s : inS) {
                outmsg += "<li>" + s + "</li>";
                String out1 = callBigdata("SELECT distinct ?p WHERE {{ {  SELECT ?w1 WHERE {?w1 rdfs:label '" + s + "'.} } {  SELECT ?w1 ?s1 WHERE {?w1 ^wns:source ?s1.} } {  SELECT ?w1 ?s1 ?w2 WHERE {?s1 wns:target ?w2.} } {  SELECT ?w1 ?s1 ?w2 ?l WHERE {?w2 rdfs:label ?l.} } {  SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?l ^wse:hasKeyword ?p.} }{ SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?p rdf:type wse:Input.} }}UNION{{  SELECT ?w1 WHERE {?w1 rdfs:label '" + s + "'.} } {  SELECT ?w1 ?s1 WHERE {?w1 ^wns:target ?s1.}} { SELECT ?w1 ?s1 ?w2 WHERE {?s1 wns:source ?w2.}} { SELECT ?w1 ?s1 ?w2 ?l WHERE {?w2 rdfs:label ?l.}} { SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?l ^wse:hasKeyword ?p.}}{ SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?p rdf:type wse:Input.}}}UNION{{ SELECT ?p WHERE {'"+ s +"' ^wse:hasKeyword ?p.}}{ SELECT ?p WHERE {?p rdf:type wse:Input.}}}}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                while (cres.hasNext()) {
                    String u = cres.nextBinding().get(Var.alloc("p")).toString();
                    if (!inArrMatch.contains(u)) {
                        inArrMatch.add(u);
                    }
                }
            }
            outmsg += "</ul>";

            outmsg += "<h3>Output</h3><ul>";
            for (String s : outS) {
                outmsg += "<li>" + s + "</li>";
                String out1 = callBigdata("SELECT distinct ?p WHERE {{ {  SELECT ?w1 WHERE {?w1 rdfs:label '" + s + "'.} } {  SELECT ?w1 ?s1 WHERE {?w1 ^wns:source ?s1.} } {  SELECT ?w1 ?s1 ?w2 WHERE {?s1 wns:target ?w2.} } {  SELECT ?w1 ?s1 ?w2 ?l WHERE {?w2 rdfs:label ?l.} } {  SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?l ^wse:hasKeyword ?p.} }{ SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?p rdf:type wse:Output.} }}UNION{ {  SELECT ?w1 WHERE {?w1 rdfs:label '" + s + "'.} } {  SELECT ?w1 ?s1 WHERE {?w1 ^wns:target ?s1.} } {  SELECT ?w1 ?s1 ?w2 WHERE {?s1 wns:source ?w2.} } {  SELECT ?w1 ?s1 ?w2 ?l WHERE {?w2 rdfs:label ?l.} } {  SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?l ^wse:hasKeyword ?p.} }{ SELECT ?w1 ?s1 ?w2 ?l ?p WHERE {?p rdf:type wse:Output.} }}UNION{{ SELECT ?p WHERE {'"+ s +"' ^wse:hasKeyword ?p.}}{ SELECT ?p WHERE {?p rdf:type wse:Output.}}}}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                while (cres.hasNext()) {
                    String u = cres.nextBinding().get(Var.alloc("p")).toString();
                    if (!outArrMatch.contains(u)) {
                        outArrMatch.add(u);
                    }
                }
            }
            outmsg += "</ul>";
            outmsg = (chkParam) ? outmsg : "Please define input and output parameters.";

            session.setAttribute("kinput", inArrMatch);
            session.setAttribute("koutput", outArrMatch);
			session.setAttribute("outmsg",outmsg);
        }
		ns = (String) session.getAttribute("ontons");
		int pg = 0;
		int pp = 10;
		try{
			pg = Integer.parseInt(request.getParameter("pg"));
		}catch (NumberFormatException e){

		}
		
		ArrayList<String> sesIn = (ArrayList<String>) session.getAttribute("kinput");
		ArrayList<String> sesOut = (ArrayList<String>) session.getAttribute("koutput");
		ArrayList<ArrayList<String>> pts = new ArrayList<ArrayList<String>>();
		String K = "";
		String PS = "";
		String pgStr = "";
		int kcount = 0;
		int pcount = 0;
		if(sesIn!=null&&sesOut!=null){
			if((Math.ceil((sesIn.size()*sesOut.size())/(double)pp)-1)<pg){
				pg = (int) Math.ceil((sesIn.size()*sesOut.size())/(double)pp)-1;
			}
			int offstart = pg*pp;
			int offend = offstart+pp;

			//Start Composing WSs - Finding Paths
			int vi = -1, vo = -1;
			try{
				vi = Integer.parseInt(request.getParameter("ki"));
			}catch (NumberFormatException e){

			}
			try{
				vo = Integer.parseInt(request.getParameter("ko"));
			}catch (NumberFormatException e){

			}
			if (session.getAttribute("method") != null && session.getAttribute("method").equals("graph")) {
				int ki = 0;
				for (String s1 : sesIn) {
					int ko = 0;
					for (String s2 : sesOut) {
						if(kcount>=offstart&&kcount<offend){
							if(vi==ki&&vo==ko){
								K += "<li>[" + s1.split("#")[1] + "]-->[" + s2.split("#")[1] + "]*</li>";
								ArrayList<String> P = BFS(s1, s2, ns, prop);
								if (P != null) {
									pts.add(P);
									PS += "<li>" + renderPath(P) + "</li>";
								}
							}else {
								K += "<li><a class='IOdependency' href='execWSC.jsp?ki="+ki+"&ko="+ko+"&pg="+pg+"'>[" + s1.split("#")[1] + "]-->[" + s2.split("#")[1] + "]</a></li>";
							}
						}
						if((kcount%pp)==0&&(kcount/pp)>=(pg-(pp/2))&&pcount<10){
							pgStr += ((kcount/pp)==pg)?"<span>"+((kcount/pp)+1)+"</span>&nbsp;":"<a href='execWSC.jsp?ki=-1&ko=-1&pg="+(kcount/pp)+"'>"+((kcount/pp)+1)+"</a>&nbsp";
							pcount++;
						}
						kcount++;
						ko++;
					}
					ki++;
				}
			} else {

			}
		}

        //Continue Composing WSs - Merging paths
        ArrayList<ArrayList<ArrayList<String>>> cpstmp = new ArrayList<ArrayList<ArrayList<String>>>();
        ArrayList<String> chkP = new ArrayList<String>();
        for (int i = 0; i < pts.size(); i++) {// For each path
            for (int j = 0; j < pts.get(i).size(); j++) {// For each arc in a path (i)
                ArrayList<ArrayList<String>> tmp1 = (cpstmp.size() > j && cpstmp.get(j) != null) ? cpstmp.get(j) : new ArrayList<ArrayList<String>>();//Split-Join construct of a sequence
                //System.out.println(i + "::" + pts.get(i).get(j));
                String out1 = callBigdata("SELECT ?s WHERE {<" + pts.get(i).get(j) + "> wse:hasOperation ?s.}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                ArrayList<String> tmp2 = new ArrayList<String>();//Redundant operations for each atomic process
                int limitO = 0;
				while (cres.hasNext()&&limitO<10) {
                    String u = cres.nextBinding().get(Var.alloc("s")).toString();
                    /*if (!chkP.contains(u)) {
                     tmp2.add(u);
                     chkP.add(u);
                     }*/
					tmp2.add(u);
					limitO++;//Used in redundant operations limitation
                }
                if (tmp2.size() == 0) {
                    tmp2.add(pts.get(i).get(j));
                }
                boolean isSubset = false;
                for (int n = 0; n < tmp1.size(); n++) {
                    if (tmp1.get(n).containsAll(tmp2)) {
                        isSubset = true;
                    } else if (tmp2.containsAll(tmp1.get(n))) {
                        tmp1.remove(tmp1.get(n));
                    }
                }
                if (!isSubset) {
                    tmp1.add(tmp2);
                }
                if ((cpstmp.size() > j && cpstmp.get(j) != null)) {
                    cpstmp.set(j, tmp1);
                } else {
                    cpstmp.add(tmp1);
                }
            }
        }
        //Continue Composing WSs - Finding Non-redundant
        ArrayList<ArrayList<String>> cpsChk = new ArrayList<ArrayList<String>>();
        ArrayList<String> cps = new ArrayList<String>();//text output
        ArrayList<String> cps2 = new ArrayList<String>();//svg output
        ArrayList<OntModel> cps3 = new ArrayList<OntModel>();//owls output
        int max = 0;
        for (int i = 1; i < cpstmp.size(); i += 2) {
            max = ((cpstmp.get(i).size() - 1) > max) ? cpstmp.get(i).size() - 1 : max;
        }
        for (int i = 1; i < cpstmp.size(); i += 2) {
            String instr = renderTextP(cpstmp.get(i - 1));
            String outstr = renderTextP(cpstmp.get(i + 1));
            String instr2 = renderSvgP(cpstmp.get(i - 1), (i - 1), max);
            String outstr2 = renderSvgP(cpstmp.get(i + 1), (i + 1), max);
            for (int j = 0; j < cpstmp.get(i).size(); j++) {
                ArrayList<String> tmp3 = new ArrayList<String>();
                ArrayList<String> tmp32 = new ArrayList<String>();
                ArrayList<OntModel> tmp33 = new ArrayList<OntModel>();
                ArrayList<ArrayList<String>> tmp4 = new ArrayList<ArrayList<String>>();//Check each composition's atomic redundant
                for (int k = 0; k < cpstmp.get(i).get(j).size(); k++) {
                    String ext = renderTextCP(cpstmp.get(i).get(j).get(k), i, j, (cpstmp.get(i).size() - 1));
                    String ext2 = renderSvgCP(cpstmp.get(i).get(j).get(k), i, j, (cpstmp.get(i).size() - 1), max);
                    if (i == 1 && j == 0) {
                        ext = instr + ext;
                        ext2 = instr2 + ext2;
                    }
                    if (j == (cpstmp.get(i).size() - 1)) {//Check if end of parallel operation set
                        ext = ext + outstr;
                        ext2 = ext2 + outstr2;
                    }

                    for (int l = 0; l < cps.size(); l++) {
                        //String cpname = ns + "#GEN" + dtStr + "_CP" + ((k * l) + (l + 1));
						String cpname = ns + "#GEN" + dtStr + "_CP" + (l + 1);
                        if (!cpsChk.get(l).contains(cpstmp.get(i).get(j).get(k))) {
                            tmp3.add(cps.get(l) + ext);
                            tmp32.add(cps2.get(l) + ext2);
                            ArrayList<String> tmp5 = (ArrayList<String>) cpsChk.get(l).clone();
                            tmp5.add(cpstmp.get(i).get(j).get(k));
                            tmp4.add(tmp5);

                            OntModel cpmod = ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);//Create cp owl-s model
                            //Individual cp = cpmod.createIndividual(cpname, schema.getOntClass(process + "CompositeProcess"));
                            cpmod.add(cps3.get(l));
							//System.out.println(cpname+":"+i+":"+j+":"+k);
                            extendSPJ(cpmod, cpname, cpstmp.get(i).get(j).get(k), (j + 1), schema, ns, prop);
                            if (j == (cpstmp.get(i).size() - 1) && ((i * 2) + 1) < cpstmp.size()) {
                                Individual seq = cpmod.createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2), schema.getOntClass(process + "Sequence"));
                                Individual clist = cpmod.createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_List", schema.getOntClass(process + "ControlConstructList"));
                                seq.addProperty(schema.getProperty(process + "components"), clist);
                                Individual spj = cpmod.createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_Spj", schema.getOntClass(process + "Split-Join"));
                                clist.addProperty(schema.getProperty(list + "first"), spj);
                                Individual cbag = cpmod.createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_Spj_Bag", schema.getOntClass(process + "ControlConstructBag"));
                                spj.addProperty(schema.getProperty(process + "components"), cbag);
                                getRecentSeqList(cpmod, schema, cpmod.getIndividual(cpname)).addProperty(schema.getProperty(list + "rest"), seq);
                            }

                            tmp33.add(cpmod);
                        } else {
                            if (j == (cpstmp.get(i).size() - 1)) {
                                tmp3.add(cps.get(l) + ")-->" + outstr);
                                tmp32.add(cps2.get(l) + outstr2);

                                if (((i * 2) + 1) < cpstmp.size()) {
                                    Individual seq = cps3.get(l).createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2), schema.getOntClass(process + "Sequence"));
                                    Individual clist = cps3.get(l).createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_List", schema.getOntClass(process + "ControlConstructList"));
                                    seq.addProperty(schema.getProperty(process + "components"), clist);
                                    Individual spj = cps3.get(l).createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_Spj", schema.getOntClass(process + "Split-Join"));
                                    clist.addProperty(schema.getProperty(list + "first"), spj);
                                    Individual cbag = cps3.get(l).createIndividual(cpname + "_Seq" + (((i - 1) / 2) + 2) + "_Spj_Bag", schema.getOntClass(process + "ControlConstructBag"));
                                    spj.addProperty(schema.getProperty(process + "components"), cbag);
                                    getRecentSeqList(cps3.get(l), schema, cps3.get(l).getIndividual(cpname)).addProperty(schema.getProperty(list + "rest"), seq);
                                }

                                tmp33.add(cps3.get(l));
                            } else {
                                tmp3.add(cps.get(l));
                                tmp32.add(cps2.get(l));
                                tmp33.add(cps3.get(l));
                            }
                            tmp4.add(cpsChk.get(l));
                        }
                    }
                    if (cps.size() == 0) {
                        tmp3.add(ext);
                        tmp32.add(ext2);
                        ArrayList<String> tmp5 = new ArrayList<String>();
                        tmp5.add(cpstmp.get(i).get(j).get(k));
                        tmp4.add(tmp5);

                        String newcpname = ns + "#GEN" + dtStr + "_CP" + (k + 1);
                        OntModel cpmod = ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM);//Create cp owl-s model
                        Individual cp = cpmod.createIndividual(newcpname, schema.getOntClass(process + "CompositeProcess"));
                        Individual seq = cpmod.createIndividual(newcpname + "_Seq1", schema.getOntClass(process + "Sequence"));
                        cp.addProperty(schema.getProperty(process + "composedOf"), seq);
                        Individual clist = cpmod.createIndividual(newcpname + "_Seq1_List", schema.getOntClass(process + "ControlConstructList"));
                        seq.addProperty(schema.getProperty(process + "components"), clist);
                        Individual spj = cpmod.createIndividual(newcpname + "_Seq1_Spj", schema.getOntClass(process + "Split-Join"));
                        clist.addProperty(schema.getProperty(list + "first"), spj);
                        Individual cbag = cpmod.createIndividual(newcpname + "_Seq1_Spj_Bag", schema.getOntClass(process + "ControlConstructBag"));
                        spj.addProperty(schema.getProperty(process + "components"), cbag);
                        extendSPJ(cpmod, newcpname, cpstmp.get(i).get(j).get(k), (j + 1), schema, ns, prop);
                        if (j == (cpstmp.get(i).size() - 1) && ((i * 2) + 1) < cpstmp.size()) {
                            Individual seq2 = cpmod.createIndividual(newcpname + "_Seq2", schema.getOntClass(process + "Sequence"));
                            Individual clist2 = cpmod.createIndividual(newcpname + "_Seq" + (((i - 1) / 2) + 2) + "_List", schema.getOntClass(process + "ControlConstructList"));
                            seq2.addProperty(schema.getProperty(process + "components"), clist2);
                            Individual spj2 = cpmod.createIndividual(newcpname + "_Seq2" + "_Spj", schema.getOntClass(process + "Split-Join"));
                            clist2.addProperty(schema.getProperty(list + "first"), spj2);
                            Individual cbag2 = cpmod.createIndividual(newcpname + "_Seq2" + "_Spj_Bag", schema.getOntClass(process + "ControlConstructBag"));
                            spj2.addProperty(schema.getProperty(process + "components"), cbag2);
                            getRecentSeqList(cpmod, schema, cpmod.getIndividual(newcpname)).addProperty(schema.getProperty(list + "rest"), seq2);
                        }

                        tmp33.add(cpmod);
                    }
                }
                cps = tmp3;
                cps2 = tmp32;
                cps3 = tmp33;
                cpsChk = tmp4;
            }
        }
	long endT = System.currentTimeMillis();
    
      out.write("\n");
      out.write("    <body>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <div class=\"panel-heading\">\n");
      out.write("                    <h3 class=\"panel-title\" style=\"color:red;\">\n");
      out.write("                        <a href=\"javascript:void(0);\" data-toggle=\"collapse\" data-target=\"#panelResult\">Compositions Result (in ");
      out.print((endT-startT));
      out.write(" msec.)</a>\n");
      out.write("                    </h3>\n");
      out.write("                </div>\n");
      out.write("                <div id=\"panelResult\" class=\"panel-collapse collapse in\">\n");
      out.write("                    <div class=\"panel-body\">\n");
      out.write("                        <!--<img id=\"ajaxloading\" style=\"display:none;width:80px;\" src=\"images/loading.gif\"/><br/>-->\n");
      out.write("                        ");
      out.print((ns==null) ? "Please choose a namespace." : session.getAttribute("outmsg"));
      out.write("\n");
      out.write("                        ");
      out.print((!K.equals("")) ? "<h3>Dependancy Input-Output (|K|="+(kcount)+")</h3><div style='margin-left:10px;'><<&nbsp;"+pgStr+">>&nbsp;<input id='pageJump' size='10' placeholder='GOTO'/></div><ul>" + K + "</ul><h3>Paths (Size=" + pts.size() + ")</h3>" + PS : "");
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            ");

                int count = 1;
                for (int i = 0; i < cps.size(); i++) {
                    StringWriter sw = new StringWriter();
                    cps3.get(i).write(sw, "RDF/XML-ABBREV");
            
      out.write("\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <div class=\"panel-heading\">\n");
      out.write("                    <h3 class=\"panel-title\" style=\"color:red;\">\n");
      out.write("                        <input type=\"checkbox\" name=\"export\" value=\"\"/><span style=\"margin-left:5px;\">Process:");
      out.print(count);
      out.write("</span>\n");
      out.write("                        <div data-id=\"exp");
      out.print(i);
      out.write("\" class=\"btn btn-default btn-export\" style=\"margin-bottom:10px;\"><span class=\"glyphicon glyphicon-export\"></span><span style=\"margin-left:5px;\">Export</span></div>\n");
      out.write("                    </h3>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"panel-body\">\n");
      out.write("                    <div style=\"padding-bottom:10px;margin-bottom:10px;border-bottom:1px solid gray;\">");
      out.print(cps.get(i));
      out.write("</div>\n");
      out.write("                    <svg width=\"100%\">");
      out.print(cps2.get(i));
      out.write("</svg>\n");
      out.write("                    <textarea id=\"exp");
      out.print(i);
      out.write("\" style=\"display:none;width:100%;height:200px;\">");
      out.print(sw.toString());
      out.write("</textarea>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            ");

                    count++;
                }
            
      out.write("\n");
      out.write("            <a class=\"btn btn-sm btn-success\" href=\"");
      out.print(redirect);
      out.write("\">Back</a>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/libs/jquery/jquery.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/libs/bootstrap-3.2.0-dist/js/bootstrap.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        ");

            String chk = "var chk = true;";
            if (!chkParam) {
                chk = "var chk = false;";
            }
        
      out.write("\n");
      out.write("        ");
      out.print(chk);
      out.write("\n");
      out.write("        function callRuleReasoning() {\n");
      out.write("            var httpObj = null;\n");
      out.write("            if (window.XMLHttpRequest) {\n");
      out.write("                httpObj = new XMLHttpRequest();\n");
      out.write("            } else {\n");
      out.write("                httpObj = ActiveXObject(\"Microsoft.XMLHTTP\");\n");
      out.write("            }\n");
      out.write("            if (httpObj != null && chk) {\n");
      out.write("                httpObj.open('POST', 'execWSCRules.jsp', true);\n");
      out.write("                httpObj.onreadystatechange = function() {\n");
      out.write("                    if (httpObj.readyState == 4 && httpObj.status == 200) {\n");
      out.write("                        //alert(httpObj.responseText);\n");
      out.write("                        window.location.href = 'execWSCExt.jsp';\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                httpObj.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n");
      out.write("                httpObj.send('');\n");
      out.write("                $('#ajaxloading').show();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        $(\".btn-export\").click(function() {\n");
      out.write("            if ($('#' + $(this).data('id')).is(':visible')) {\n");
      out.write("                $('#' + $(this).data('id')).hide();\n");
      out.write("            } else {\n");
      out.write("                $('#' + $(this).data('id')).show();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\t\t$('.IOdependency').click(function() {\n");
      out.write("\t\t\t$(this).parent().parent().parent().html(\"<img src='images/ajax.gif'/>\");\n");
      out.write("\t\t});\n");
      out.write("\t\t$('#pageJump').keypress(function(e){\n");
      out.write("\t\t\tif(e.which==13){\n");
      out.write("\t\t\t\twindow.location.href='execWSC.jsp?ki=-1&ko=-1&pg='+($(this).val()-1);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("    </script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
