/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2014-11-11 03:17:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.net.Socket;
import java.util.Properties;

public final class execWSCRules_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String callBigdata(String sparql, String ontons, Properties prop, String action, boolean shortMsg) throws IOException {

        String fullsparql = (shortMsg) ? "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n"
                : "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \r\n"
                + "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n"
                + "PREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n"
                + "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n"
                + "PREFIX wn: <http://wordnet.princeton.edu/word#> \r\n"
                + "PREFIX wns: <http://wordnet.princeton.edu/schema#> \r\n"
                + "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n";

        String fullmsg = action + "=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
        Socket sock = new Socket(prop.getProperty("rdf_host"), Integer.parseInt(prop.getProperty("rdf_port")));
        String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
                + "Host: " + prop.getProperty("rdf_host") + ":" + prop.getProperty("rdf_port") + "\r\n"
                + "Content-Length: " + fullmsg.length() + "\r\n"
                + "Content-Type: application/x-www-form-urlencoded\r\n"
                + "\r\n"
                + fullmsg;
        PrintWriter os = new PrintWriter(sock.getOutputStream());
        os.println(msg);
        os.flush();

        InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
        BufferedReader br = new BufferedReader(is);
        String outmsg = "";
        String line;
        while ((line = br.readLine()) != null) {
            outmsg += line;
        }

        os.close();
        is.close();
        sock.close();

        return outmsg;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    ");

        Properties prop = new Properties();
        prop.load(getServletContext().getResourceAsStream("/WEB-INF/config.properties"));

        String redirect = "index.jsp";
        String outmsg = "";
        String inmsg = "";
        String ns = "";
        HashMap<String, String> rules = new HashMap<String, String>();
        if (session.getAttribute("ontons") != null && !session.getAttribute("ontons").equals("none")) {
            ns = session.getAttribute("ontons").toString();
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://" + prop.getProperty("db_host") + ":" + prop.getProperty("db_port") + "/" + prop.getProperty("db_name"), prop.getProperty("db_user"), prop.getProperty("db_pass"));
                Statement stmt = con.createStatement();
                ResultSet res = stmt.executeQuery("select * from rule");
                String[] rKey = new String[]{"rule9", "rule10", "rule11", "rule12"};
                while (res.next()) {
                    for (String k : rKey) {
                        if (res.getString("name").equals(k)) {
                            rules.put(k, res.getString("sparql"));
                        }
                    }
                }
            } catch (Exception e) {
                //e.printStackTrace();
            }

            for (String param : (String[]) session.getAttribute("input")) {
				inmsg += "<" + ns + "#" + param + "> rdf:type <" + ns + "#Parameter>. \r\n";
				String[] keys = param.split("_");
				for (String k : keys) {
					inmsg += "<" + ns + "#" + param + "> <" + ns + "#hasKeyword> \"" + k + "\". \r\n";
				}
			}
            for (String param : (String[]) session.getAttribute("output")) {
				inmsg += "<" + ns + "#" + param + "> rdf:type <" + ns + "#Parameter>. \r\n";
				String[] keys = param.split("_");
				for (String k : keys) {
					inmsg += "<" + ns + "#" + param + "> <" + ns + "#hasKeyword> \"" + k + "\". \r\n";
				}
			}
			inmsg = "INSERT DATA {" + inmsg + "}";
			outmsg += callBigdata(inmsg, ns, prop, "update", false);
			outmsg += callBigdata(rules.get("rule7"), ns, prop, "update", true);
			outmsg += callBigdata(rules.get("rule8"), ns, prop, "update", true);
            outmsg += callBigdata(rules.get("rule9"), ns, prop, "update", true);
            outmsg += callBigdata(rules.get("rule10"), ns, prop, "update", true);
            outmsg += callBigdata(rules.get("rule11"), ns, prop, "update", true);
            outmsg += callBigdata(rules.get("rule12"), ns, prop, "update", true);
        }
    
      out.write("\n");
      out.write("    <body>\n");
      out.write("\t\t");
      out.print(outmsg);
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
