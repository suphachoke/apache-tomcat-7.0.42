/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2015-03-06 02:48:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.query.ResultSetFactory;
import java.util.HashMap;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.net.Socket;
import java.util.Properties;

public final class execWSCExt_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String callBigdata(String sparql, String ontons, Properties prop, String action, boolean shortMsg) throws IOException {

        String fullsparql = (shortMsg) ? "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n"
                : "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \r\n"
                + "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n"
                + "PREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n"
                + "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n"
                + "PREFIX wn: <http://wordnet.princeton.edu/word#> \r\n"
                + "PREFIX wns: <http://wordnet.princeton.edu/schema#> \r\n"
                + "PREFIX wsc: <http://smiil.cs.kku.ac.th/wsc#> \r\n"
                + "PREFIX wse: <" + ontons + "#> \r\n"
                + sparql
                + "\r\n";

        String fullmsg = action + "=" + URLEncoder.encode(fullsparql, "UTF-8") + "&namespace=&xhtml=true";
        Socket sock = new Socket(prop.getProperty("rdf_host"), Integer.parseInt(prop.getProperty("rdf_port")));
        String msg = "POST /bigdata/sparql HTTP/1.0\r\n"
                + "Host: " + prop.getProperty("rdf_host") + ":" + prop.getProperty("rdf_port") + "\r\n"
                + "Content-Length: " + fullmsg.length() + "\r\n"
                + "Content-Type: application/x-www-form-urlencoded\r\n"
                + "\r\n"
                + fullmsg;
        PrintWriter os = new PrintWriter(sock.getOutputStream());
        os.println(msg);
        os.flush();

        InputStreamReader is = new InputStreamReader(sock.getInputStream(), "UTF-8");
        BufferedReader br = new BufferedReader(is);
        String outmsg = "";
        String line;
        while ((line = br.readLine()) != null) {
            outmsg += line;
        }

        os.close();
        is.close();
        sock.close();

        return outmsg;
    }

    public ArrayList<String> BFS(String u, String v, String ontons, Properties prop) throws IOException {
        ArrayList<String> P = new ArrayList<String>();
        ArrayList<String> V = new ArrayList<String>();
        ArrayList<String> Q = new ArrayList<String>();
        V.add(u);
        Q.add(u);
        HashMap<String, ArrayList<String>> M = new HashMap<String, ArrayList<String>>();
        P.add(u);
        M.put(u, P);
        while (Q.size() > 0) {
            String t = Q.get(0);
            Q.remove(t);
            P = M.get(t);
            if (t.equals(v)) {
                return P;
            }
            for (String e : adjacentArc(t, ontons, prop)) {
                ArrayList<String> Pi = (ArrayList<String>) P.clone();
                String ui = headVertex(e, ontons, prop);
                Pi.add(e);
                Pi.add(ui);
                M.put(ui, Pi);
                if (!V.contains(ui)) {
                    V.add(ui);
                    Q.add(ui);
                }
            }
        }
        return null;
    }

    public String[] adjacentArc(String t, String ontons, Properties prop) throws IOException {
        String[] ret = null;
        String out = callBigdata("SELECT ?s WHERE {?s wse:tail <" + t + ">. ?s rdf:type <" + ontons + "#Arc>.}", ontons, prop, "query", false);
        com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out.split("<?xml version=")[1]);
        ArrayList arr = new ArrayList();
        while (cres.hasNext()) {
            String u = cres.nextBinding().get(Var.alloc("s")).toString();
            if (!arr.contains(u)) {
                arr.add(u);
            }
        }
        ret = new String[arr.size()];
        arr.toArray(ret);
        return ret;
    }

    public String headVertex(String e, String ontons, Properties prop) throws IOException {
        String ret = null;
        String out = callBigdata("SELECT ?s WHERE {<" + e + "> wse:head ?s. ?s rdf:type <" + ontons + "#Vertex>.}", ontons, prop, "query", false);
        com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out.split("<?xml version=")[1]);
        if (cres.hasNext()) {
            String u = cres.nextBinding().get(Var.alloc("s")).toString();
            ret = u;
        }
        return ret;
    }

    public String renderTextCP(String nd, int i, int j, int size) {
        String ext = nd.split("#")[1];
        if (j == 0) {
            ext = "-->(" + ext;
        }
        if (j > 0) {
            ext = "|" + ext;
        }
        if (j == size) {
            ext += ")-->";
        }
        return ext;
    }

    public String renderSvgCP(String nd, int i, int j, int size, int max) {
        double mul = (((double) max - (double) size) / 2);
        double rad1 = (((double) (((j * 40) + 15) + (mul * 40)) - (double) ((((max * 40) / 2) + 15))) / 50) * 45;
        String radXY1 = ((((i - 1) * 150) + 50) + 10) + " " + (((j * 40) + 15) + (mul * 40));
        double rad2 = (((double) ((((max * 40) / 2) + 15)) - (double) (((j * 40) + 15) + (mul * 40))) / 50) * 45;
        String radXY2 = ((((i - 1) * 150) + 300)) + " " + (((max * 40) / 2) + 15);
        String ret = "<g><line x1='" + (((i - 1) * 150) + 10) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((max * 40) / 2) + 15) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<g transform='rotate(" + rad1 + " " + radXY1 + ")'><line x1='" + ((((i - 1) * 150) + 50) + 2) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((j * 40) + 10) + (mul * 40)) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<line x1='" + ((((i - 1) * 150) + 50) + 2) + "' x2='" + ((((i - 1) * 150) + 50) + 10) + "' y1='" + (((j * 40) + 20) + (mul * 40)) + "' y2='" + (((j * 40) + 15) + (mul * 40)) + "' style='stroke:rgb(0,0,0);stroke-width:1'/></g>"
                + "<rect x='" + ((((i - 1) * 150) + 50) + 10) + "' y='" + ((j * 40) + (mul * 40)) + "' width='200' height='30' style='fill:rgb(200,200,255);stroke-width:1;stroke:rgb(0,0,0);'></rect>"
                + "<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd) + "' target='_blank'>"
                + "<text font-family='Verdana' font-size='14' x='" + (((((i - 1) * 150) + 5) + 50) + 10) + "' y='" + (((j * 40) + 21) + (mul * 40)) + "' fill='black'>" + nd.split("#")[1] + "</text></a></g>"
                + "<line x1='" + ((((i - 1) * 150) + 250) + 10) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((j * 40) + 15) + (mul * 40)) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<g transform='rotate(" + rad2 + " " + radXY2 + ")'><line x1='" + ((((i - 1) * 150) + 300) - 8) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((max * 40) / 2) + 10) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/>"
                + "<line x1='" + ((((i - 1) * 150) + 300) - 8) + "' x2='" + ((((i - 1) * 150) + 300)) + "' y1='" + (((max * 40) / 2) + 20) + "' y2='" + (((max * 40) / 2) + 15) + "' style='stroke:rgb(0,0,0);stroke-width:1'/></g>";
        if (j == 0) {

        }
        if (j > 0) {

        }
        if (j == size) {

        }
        return ret;
    }

    public String renderTextP(ArrayList<ArrayList<String>> nd) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            for (int j = 0; j < nd.get(i).size(); j++) {
                ret += (ret.equals("")) ? nd.get(i).get(j).split("#")[1] : "," + nd.get(i).get(j).split("#")[1];
            }
        }
        return ret;
    }

    public String renderSvgP(ArrayList<ArrayList<String>> nd, int k, int max) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            for (int j = 0; j < nd.get(i).size(); j++) {
                ret += (ret.equals("")) ? "<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd.get(i).get(j)) + "' target='_blank'>" + nd.get(i).get(j).split("#")[1] + "</a>" : ",<a xlink:href='linkedData.jsp?id=" + URLEncoder.encode(nd.get(i).get(j)) + "' target='_blank'>" + nd.get(i).get(j).split("#")[1] + "</a>";
            }
        }
        ret = "<g><circle cx='" + ((k * 150) + 5) + "' cy='" + (((max * 40) / 2) + 15) + "' r='4' stroke='black' stroke-width='1' fill='red'/>"
                + "<line x1='" + ((k * 150) + 5) + "' x2='" + ((k * 150) + 5) + "' y1='" + (((max * 40) / 2) + 20) + "' y2='" + ((max * 40) + 40) + "' style='stroke:rgb(0,0,0);stroke-width:1;stroke-dasharray:2,2'/>"
                + "<text font-family='Verdana' font-size='11' x='" + ((k * 150) + 5) + "' y='" + ((max * 40) + 50) + "' fill='black'>" + ret + "</text></g>";
        return ret;
    }

    public String renderPath(ArrayList<String> nd) {
        String ret = "";
        for (int i = 0; i < nd.size(); i++) {
            String atom = "<a href='linkedData.jsp?id=" + URLEncoder.encode(nd.get(i)) + "' target='_blank'>" + nd.get(i).split("#")[1] + "</a>";
            ret += (ret.equals("")) ? atom : "-->" + atom;
        }
        return ret;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Web Services Composition Management System</title>\n");
      out.write("        <meta charset=\"utf-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("\n");
      out.write("        <link rel=\"stylesheet\" href=\"js/libs/bootstrap-3.2.0-dist/css/bootstrap.min.css\"/>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            .textbox{width:100%;}\n");
      out.write("            .panel-heading a:after {\n");
      out.write("                font-family: 'Glyphicons Halflings';\n");
      out.write("                content: \"\\e114\";\n");
      out.write("                float: right;\n");
      out.write("                color: grey;\n");
      out.write("            }\n");
      out.write("            .panel-heading a.collapsed:after {\n");
      out.write("                content: \"\\e080\";\n");
      out.write("            }\n");
      out.write("\t\t\th3{font-size:14pt;}\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    ");

        Properties prop = new Properties();
        prop.load(getServletContext().getResourceAsStream("/WEB-INF/config.properties"));

        String redirect = "index.jsp";
        String outmsg = "";
        String inmsg = "";
        String ns = "";
        HashMap<String, String> rules = new HashMap<String, String>();
        ArrayList<String> inArrMatch = new ArrayList<String>();
        ArrayList<String> outArrMatch = new ArrayList<String>();
        if (session.getAttribute("ontons") != null && !session.getAttribute("ontons").equals("none")) {
            ns = session.getAttribute("ontons").toString();

            outmsg += "<!--<h3>Input</h3><ul>";
            for (String s : (String[]) session.getAttribute("input")) {
                inArrMatch.add(ns + "#" + s);
                outmsg += "<li>" + ns + "#" + s + "</li>";
                String out1 = callBigdata("SELECT ?s WHERE {?m wse:sourceParameter <" + ns + "#" + s + ">. ?m wse:targetParameter ?s. ?m wse:total-score ?c. FILTER(?c > 0.8).}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                while (cres.hasNext()) {
                    String u = cres.nextBinding().get(Var.alloc("s")).toString();
                    if (!inArrMatch.contains(u)) {
                        inArrMatch.add(u);
                        outmsg += "<li>" + u + "</li>";
                    }
                }
            }
            outmsg += "</ul><h3>Output</h3><ul>";
            for (String s : (String[]) session.getAttribute("output")) {
                outArrMatch.add(ns + "#" + s);
                outmsg += "<li>" + ns + "#" + s + "</li>";
                String out1 = callBigdata("SELECT ?s WHERE {?m wse:sourceParameter <" + ns + "#" + s + ">. ?m wse:targetParameter ?s. ?m wse:total-score ?c. FILTER(?c > 0.8).}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                while (cres.hasNext()) {
                    String u = cres.nextBinding().get(Var.alloc("s")).toString();
                    if (!outArrMatch.contains(u)) {
                        outArrMatch.add(u);
                        outmsg += "<li>" + u + "</li>";
                    }
                }
            }
            outmsg += "</ul>-->";
        }

        //Start Composing WSs - Finding Paths
        String K = "";
        String PS = "";
        ArrayList<ArrayList<String>> pts = new ArrayList<ArrayList<String>>();
        if (session.getAttribute("method") != null && session.getAttribute("method").equals("graph")) {
            for (String s1 : inArrMatch) {
                for (String s2 : outArrMatch) {
                    K += "<li>[" + s1.split("#")[1] + "]-->[" + s2.split("#")[1] + "]</li>";
                    ArrayList<String> P = BFS(s1, s2, ns, prop);
                    if (P != null) {
                        pts.add(P);
                        PS += "<li>" + renderPath(P) + "</li>";
                    }
                }
            }
        } else {

        }

        //Continue Composing WSs - Merging paths
        ArrayList<ArrayList<ArrayList<String>>> cpstmp = new ArrayList<ArrayList<ArrayList<String>>>();
        ArrayList<String> chkP = new ArrayList<String>();
        for (int i = 0; i < pts.size(); i++) {// For each path
            for (int j = 0; j < pts.get(i).size(); j++) {// For each arc in a path (i)
                ArrayList<ArrayList<String>> tmp1 = (cpstmp.size() > j && cpstmp.get(j) != null) ? cpstmp.get(j) : new ArrayList<ArrayList<String>>();//Split-Join construct of a sequence
                System.out.println(i + "::" + pts.get(i).get(j));
                String out1 = callBigdata("SELECT ?s WHERE {<" + pts.get(i).get(j) + "> rdf:type wse:Arc. <" + pts.get(i).get(j) + "> wse:hasOperation ?s.}", ns, prop, "query", false);
                com.hp.hpl.jena.query.ResultSet cres = ResultSetFactory.fromXML("<?xml version=" + out1.split("<?xml version=")[1]);
                ArrayList<String> tmp2 = new ArrayList<String>();//Redundant operations for each atomic process
                while (cres.hasNext()) {
                    String u = cres.nextBinding().get(Var.alloc("s")).toString();
                    /*if (!chkP.contains(u)) {
                     tmp2.add(u);
                     chkP.add(u);
                     }*/
                    tmp2.add(u);
                }
                if (tmp2.size() == 0) {
                    tmp2.add(pts.get(i).get(j));
                }
                boolean isSubset = false;
                for (int n = 0; n < tmp1.size(); n++) {
                    if (tmp1.get(n).containsAll(tmp2)) {
                        isSubset = true;
                    } else if (tmp2.containsAll(tmp1.get(n))) {
                        tmp1.remove(tmp1.get(n));
                    }
                }
                if (!isSubset) {
                    tmp1.add(tmp2);
                }
                if ((cpstmp.size() > j && cpstmp.get(j) != null)) {
                    cpstmp.set(j, tmp1);
                } else {
                    cpstmp.add(tmp1);
                }
            }
        }
        //Continue Composing WSs - Finding Non-redundant
        ArrayList<ArrayList<String>> cpsChk = new ArrayList<ArrayList<String>>();
        ArrayList<String> cps = new ArrayList<String>();//text output
        ArrayList<String> cps2 = new ArrayList<String>();//svg output
        int max = 0;
        for (int i = 1; i < cpstmp.size(); i += 2) {
            max = ((cpstmp.get(i).size() - 1) > max) ? cpstmp.get(i).size() - 1 : max;
		}
        for (int i = 1; i < cpstmp.size(); i += 2) {
            String instr = renderTextP(cpstmp.get(i - 1));
            String outstr = renderTextP(cpstmp.get(i + 1));
            String instr2 = renderSvgP(cpstmp.get(i - 1), (i - 1), max);
            String outstr2 = renderSvgP(cpstmp.get(i + 1), (i + 1), max);
            for (int j = 0; j < cpstmp.get(i).size(); j++) {
                ArrayList<String> tmp3 = new ArrayList<String>();
                ArrayList<String> tmp32 = new ArrayList<String>();
                ArrayList<ArrayList<String>> tmp4 = new ArrayList<ArrayList<String>>();//Check each composition's atomic redundant
                for (int k = 0; k < cpstmp.get(i).get(j).size(); k++) {
                    String ext = renderTextCP(cpstmp.get(i).get(j).get(k), i, j, (cpstmp.get(i).size() - 1));
                    String ext2 = renderSvgCP(cpstmp.get(i).get(j).get(k), i, j, (cpstmp.get(i).size() - 1), max);
                    if (i == 1 && j == 0) {
                        ext = instr + ext;
                        ext2 = instr2 + ext2;
                    }
                    if (j == (cpstmp.get(i).size() - 1)) {
                        ext = ext + outstr;
                        ext2 = ext2 + outstr2;
                    }
                    for (int l = 0; l < cps.size(); l++) {
                        if (!cpsChk.get(l).contains(cpstmp.get(i).get(j).get(k))) {
                            tmp3.add(cps.get(l) + ext);
                            tmp32.add(cps2.get(l) + ext2);
                            ArrayList<String> tmp5 = (ArrayList<String>) cpsChk.get(l).clone();
                            tmp5.add(cpstmp.get(i).get(j).get(k));
                            tmp4.add(tmp5);
                        } else {
                            if (j == (cpstmp.get(i).size() - 1)) {
                                tmp3.add(cps.get(l) + ")-->" + outstr);
                                tmp32.add(cps2.get(l) + outstr2);
                            } else {
                                tmp3.add(cps.get(l));
                                tmp32.add(cps2.get(l));
                            }
                            tmp4.add(cpsChk.get(l));
                        }
                    }
                    if (cps.size() == 0) {
                        tmp3.add(ext);
                        tmp32.add(ext2);
                        ArrayList<String> tmp5 = new ArrayList<String>();
                        tmp5.add(cpstmp.get(i).get(j).get(k));
                        tmp4.add(tmp5);
                    }
                }
                cps = tmp3;
                cps2 = tmp32;
                cpsChk = tmp4;
            }
        }
    
      out.write("\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"panel panel-default\">\n");
      out.write("            <div class=\"panel-heading\">\n");
      out.write("                <h3 class=\"panel-title\" style=\"color:red;\">\n");
      out.write("                    <a href=\"javascript:void(0);\" data-toggle=\"collapse\" data-target=\"#panelA\">Compositions Result</a>\n");
      out.write("                </h3>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"panelA\" class=\"panel-collapse collapse in\">\n");
      out.write("                <div class=\"panel-body\">\n");
      out.write("                    <!--<img id=\"ajaxloading\" style=\"display:none;width:80px;\" src=\"images/loading.gif\"/><br/>-->\n");
      out.write("                    ");
      out.print((outmsg.equals("")) ? "Please choose a namespace." : outmsg);
      out.write("\n");
      out.write("                    ");
      out.print((!K.equals("")) ? "<h3>Dependancy Input-Output (K)</h3><ul>" + K + "</ul><h3>Paths Found (Size=" + pts.size() + ")</h3>" + PS : "");
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\t\t<div class=\"btn btn-default\" style=\"margin-bottom:10px;\"><span class=\"glyphicon glyphicon-export\"></span><span style=\"margin-left:5px;\">Export</span></div>\n");
      out.write("        ");

            int count = 1;
            for (int i = 0; i < cps.size(); i++) {
        
      out.write("\n");
      out.write("        <div class=\"panel panel-default\">\n");
      out.write("            <div class=\"panel-heading\">\n");
      out.write("\t\t\t\t<h3 class=\"panel-title\" style=\"color:red;\">\n");
      out.write("\t\t\t\t\t<input type=\"checkbox\" name=\"export\" value=\"\"/><span style=\"margin-left:5px;\">Process:");
      out.print(count);
      out.write("</span>\n");
      out.write("\t\t\t\t</h3>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"panel-body\">\n");
      out.write("                <div style=\"padding-bottom:10px;margin-bottom:10px;border-bottom:1px solid gray;\">");
      out.print(cps.get(i));
      out.write("</div>\n");
      out.write("                <svg width=\"100%\">");
      out.print(cps2.get(i));
      out.write("</svg>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        ");

                count++;
            }
        
      out.write("\n");
      out.write("        <a class=\"btn btn-sm btn-success\" href=\"");
      out.print(redirect);
      out.write("\">Back</a>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("<script type=\"text/javascript\" src=\"js/libs/jquery/jquery.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"js/libs/bootstrap-3.2.0-dist/js/bootstrap.min.js\"></script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
