/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2015-12-29 06:53:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.ibm.wsdl.extensions.soap12.SOAP12AddressImpl;
import com.ibm.wsdl.extensions.soap.SOAPAddressImpl;
import java.util.HashMap;
import org.w3c.dom.Node;
import com.ibm.wsdl.extensions.schema.SchemaImpl;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import javax.xml.XMLConstants;
import javax.xml.validation.SchemaFactory;
import org.w3c.dom.NodeList;
import com.ibm.wsdl.PartImpl;
import javax.wsdl.Output;
import javax.wsdl.Input;
import com.ibm.wsdl.BindingOperationImpl;
import java.util.List;
import javax.wsdl.Binding;
import com.ibm.wsdl.PortImpl;
import com.ibm.wsdl.ServiceImpl;
import javax.xml.namespace.QName;
import java.util.Map.Entry;
import java.util.Iterator;
import javax.wsdl.Definition;
import javax.wsdl.xml.WSDLReader;
import javax.wsdl.factory.WSDLFactory;
import javax.wsdl.WSDLException;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    public String getComplexType(Node nn, Definition def, String dfns, HashMap<QName, Node> map, String xsns, int count) {
        String ret = "";
        NodeList nds4 = nn.getChildNodes();
        for (int l = 0; l < nds4.getLength(); l++) {
            Node nd4 = nds4.item(l);
            if (nd4.getNodeType() == 1) {
                NodeList nds5 = nd4.getChildNodes();
                for (int m = 0; m < nds5.getLength(); m++) {
                    Node nd5 = nds5.item(m);
                    if (nd5.getNodeType() == 1 && nd5.getNodeName().equals(def.getPrefix(xsns) + ":element")) {
                        ret += "--------";
                        for (int i = 0; i < count; i++) {
                            ret += "-";
                        }
                        ret += "Elem: " + nd5.getAttributes().getNamedItem("name") + ":" + nd5.getAttributes().getNamedItem("type") + "<br/>";
                        if (nd5.getAttributes().getNamedItem("type") != null) {
                            String ns = (nd5.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd5.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                            String ln = (nd5.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd5.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd5.getAttributes().getNamedItem("type").getNodeValue();
                            QName qn = new QName(ns, ln);
                            Node nd = map.get(qn);
                            if (nd != null) {
                                ret += getComplexType(nd, def, dfns, map, xsns, (count + 1));
                            }
                        }
                    } else if (nd5.getNodeType() == 1 && nd5.getNodeName().equals(def.getPrefix(xsns) + ":extension")) {
                        String ns = (nd5.getAttributes().getNamedItem("base").getNodeValue().contains(":")) ? def.getNamespace(nd5.getAttributes().getNamedItem("base").getNodeValue().split(":")[0]) : dfns;
                        String ln = (nd5.getAttributes().getNamedItem("base").getNodeValue().contains(":")) ? nd5.getAttributes().getNamedItem("base").getNodeValue().split(":")[1] : nd5.getAttributes().getNamedItem("type").getNodeValue();
                        QName qn = new QName(ns, ln);
                        Node nd = map.get(qn);
                        if (nd != null) {
                            ret += getComplexType(nd, def, dfns, map, xsns, (count + 1));
                        }
                        NodeList nds6 = nd5.getChildNodes();
                        for (int n = 0; n < nds6.getLength(); n++) {
                            Node nd6 = nds6.item(n);
                            if (nd6.getNodeType() == 1) {
                                NodeList nds7 = nd6.getChildNodes();
                                for (int o = 0; o < nds7.getLength(); o++) {
                                    Node nd7 = nds7.item(o);
                                    if (nd7.getNodeType() == 1) {
                                        ret += "--------";
                                        for (int i = 0; i < count; i++) {
                                            ret += "-";
                                        }
                                        ret += "Elem: " + nd7.getAttributes().getNamedItem("name") + ":" + nd7.getAttributes().getNamedItem("type") + "<br/>";
                                        ns = (nd7.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd7.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                        ln = (nd7.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd7.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd7.getAttributes().getNamedItem("type").getNodeValue();
                                        qn = new QName(ns, ln);
                                        nd = map.get(qn);
                                        if (nd != null) {
                                            ret += getComplexType(nd, def, dfns, map, xsns, (count + 1));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    public String getComplexTypeSPARQL(Node nn, Definition def, String dfns, HashMap<QName, Node> map, String xsns, String ontons, String oper, String type, String wsdl) {
        String ret = "";
        NodeList nds4 = nn.getChildNodes();
        for (int l = 0; l < nds4.getLength(); l++) {
            Node nd4 = nds4.item(l);
            if (nd4.getNodeType() == 1) {
                NodeList nds5 = nd4.getChildNodes();
                for (int m = 0; m < nds5.getLength(); m++) {
                    Node nd5 = nds5.item(m);
                    if (nd5.getNodeType() == 1 && nd5.getNodeName().equals(def.getPrefix(xsns) + ":element")) {
                        Node nd = null;
                        if (nd5.getAttributes().getNamedItem("type") != null) {
                            String ns = (nd5.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd5.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                            String ln = (nd5.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd5.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd5.getAttributes().getNamedItem("type").getNodeValue();
                            QName qn = new QName(ns, ln);
                            nd = map.get(qn);

                        }
                        if (nd != null) {
                            ret += getComplexTypeSPARQL(nd, def, dfns, map, xsns, ontons, oper, type, wsdl);
                        } else {
                            ret += "<" + oper + "> <" + ontons + "#has" + type + "> <" + wsdl + "#" + nd5.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                    + "<" + wsdl + "#" + nd5.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#parameterType> <" + wsdl + "#" + nd5.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                    + "<" + wsdl + "#" + nd5.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#wsdlMessagePart> \"" + nd5.getAttributes().getNamedItem("name").getNodeValue() + "\".\n";
                        }
                    } else if (nd5.getNodeType() == 1 && nd5.getNodeName().equals(def.getPrefix(xsns) + ":extension")) {
                        String ns = (nd5.getAttributes().getNamedItem("base").getNodeValue().contains(":")) ? def.getNamespace(nd5.getAttributes().getNamedItem("base").getNodeValue().split(":")[0]) : dfns;
                        String ln = (nd5.getAttributes().getNamedItem("base").getNodeValue().contains(":")) ? nd5.getAttributes().getNamedItem("base").getNodeValue().split(":")[1] : nd5.getAttributes().getNamedItem("type").getNodeValue();
                        QName qn = new QName(ns, ln);
                        Node nd = map.get(qn);
                        if (nd != null) {
                            ret += getComplexTypeSPARQL(nd, def, dfns, map, xsns, ontons, oper, type, wsdl);
                        }
                        NodeList nds6 = nd5.getChildNodes();
                        for (int n = 0; n < nds6.getLength(); n++) {
                            Node nd6 = nds6.item(n);
                            if (nd6.getNodeType() == 1) {
                                NodeList nds7 = nd6.getChildNodes();
                                for (int o = 0; o < nds7.getLength(); o++) {
                                    Node nd7 = nds7.item(o);
                                    if (nd7.getNodeType() == 1) {
                                        nd = null;
                                        if (nd7.getAttributes().getNamedItem("type") != null) {
                                            ns = (nd7.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd7.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                            ln = (nd7.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd7.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd7.getAttributes().getNamedItem("type").getNodeValue();
                                            qn = new QName(ns, ln);
                                            nd = map.get(qn);
                                        }
                                        if (nd != null) {
                                            ret += getComplexTypeSPARQL(nd, def, dfns, map, xsns, ontons, oper, type, wsdl);
                                        } else {
                                            ret += "<" + oper + "> <" + ontons + "#has" + type + "> <" + wsdl + "#" + nd7.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                    + "<" + wsdl + "#" + nd7.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#parameterType> <" + wsdl + "#" + nd7.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                    + "<" + wsdl + "#" + nd7.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#wsdlMessagePart> \"" + nd7.getAttributes().getNamedItem("name").getNodeValue() + "\".\n";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (ret.equals("")) {
            ret += "<" + oper + "> <" + ontons + "#has" + type + "> <" + wsdl + "#" + nn.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                    + "<" + wsdl + "#" + nn.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#parameterType> <" + wsdl + "#" + nn.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                    + "<" + wsdl + "#" + nn.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#wsdlMessagePart> \"" + nn.getAttributes().getNamedItem("name").getNodeValue() + "\".\n";
        }
        return ret;
    }

    public void importSchema(HashMap semap, HashMap scmap, String xsns, String uri, String tgns) {
        try {
            Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(uri);
            NodeList nds2 = d.getDocumentElement().getChildNodes();
            for (int j = 0; j < nds2.getLength(); j++) {
                Node nd2 = nds2.item(j);
                if (nd2.getNodeType() == 1) {
                    if (nd2.getNodeName().contains(":element")) {
                        semap.put(new QName(tgns, nd2.getAttributes().getNamedItem("name").getNodeValue()), nd2);
                    } else if (nd2.getNodeName().contains(":complexType")) {
                        scmap.put(new QName(tgns, nd2.getAttributes().getNamedItem("name").getNodeValue()), nd2);
                    } else if (nd2.getNodeName().contains(":simpleType")) {
                        scmap.put(new QName(tgns, nd2.getAttributes().getNamedItem("name").getNodeValue()), nd2);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/admin/navigator.jsp", Long.valueOf(1448606788294L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Web Services Composition Management System</title>\n");
      out.write("        <meta charset=\"utf-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("\n");
      out.write("        <link rel=\"stylesheet\" href=\"../js/libs/bootstrap-3.2.0-dist/css/bootstrap.min.css\"/>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            .jumbotron{margin-top:50px;}\n");
      out.write("            .navbar{background-color:white;}\n");
      out.write("            .textbox{width:100%;}\n");
      out.write("            .panel-heading a:after {\n");
      out.write("                font-family: 'Glyphicons Halflings';\n");
      out.write("                content: \"\\e114\";\n");
      out.write("                float: right;\n");
      out.write("                color: grey;\n");
      out.write("            }\n");
      out.write("            .panel-heading a.collapsed:after {\n");
      out.write("                content: \"\\e080\";\n");
      out.write("            }\n");
      out.write("            .btn {\n");
      out.write("                margin-top: 10px;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    ");

        if (request.getParameter("ns") != null) {
            session.setAttribute("ns", request.getParameter("ns"));
        }
    
      out.write("\n");
      out.write("    <body>\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("<div class=\"navbar navbar-fixed-top\" role=\"navigation\">\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"navbar-header\">\n");
      out.write("            <div class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n");
      out.write("                <span class=\"sr-only\">Toggle navigation</span>\n");
      out.write("                <span class=\"icon-bar\" style=\"background-color:black;\"></span>\n");
      out.write("                <span class=\"icon-bar\" style=\"background-color:black;\"></span>\n");
      out.write("                <span class=\"icon-bar\" style=\"background-color:black;\"></span>\n");
      out.write("            </div>\n");
      out.write("            <a class=\"navbar-brand\" href=\"#\">WS Management System</a>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"collapse navbar-collapse\">\n");
      out.write("            <ul class=\"nav navbar-nav\">\n");
      out.write("                <li class=\"active\"><a href=\"index.jsp\">Import Services</a></li>\n");
      out.write("                <li><a href=\"graphGeneration.jsp\">Graph Preparation</a></li>\n");
      out.write("                <li><a href=\"dataRecords.jsp\">Service & Graph Records</a></li>\n");
      out.write("            </ul>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</div>");
      out.write("\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"jumbotron\">\n");
      out.write("                <form id=\"form1\" action=\"index.jsp\" method=\"post\">\n");
      out.write("                    <h2>WS Importation & Annotation</h2>\n");
      out.write("                    <div class=\"panel panel-default\">\n");
      out.write("                        <div class=\"panel-heading\">\n");
      out.write("                            <h3 class=\"panel-title\">Dataset Namespace</h3>\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"panel-body\">\n");
      out.write("                            <input class=\"input-sm textbox\" type=\"text\" name=\"ns\" value=\"");
      out.print((session.getAttribute("ns") != null) ? session.getAttribute("ns") : "http://smiil.cs.kku.ac.th/wsc/ex1");
      out.write("\"/>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"panel panel-default\">\n");
      out.write("                        <div class=\"panel-heading\">\n");
      out.write("                            <h3 class=\"panel-title\">WSDL URL</h3>\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"panel-body\">\n");
      out.write("                            <input class=\"input-sm textbox\" type=\"text\" name=\"wsdl\" value=\"");
      out.print((request.getParameter("wsdl") != null) ? request.getParameter("wsdl") : "");
      out.write("\"/>\n");
      out.write("                            <a class=\"btn btn-sm btn-success\" href=\"javascript:void(0);\" onclick=\"document.getElementById('form1').submit();\">Parse</a>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </form>\n");
      out.write("                <form id=\"form3\" action=\"importOwls.jsp\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("                    <div class=\"panel panel-default\">\n");
      out.write("                        <div class=\"panel-heading\">\n");
      out.write("                            <h3 class=\"panel-title\">Upload OWL-S</h3>\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"panel-body\">\n");
      out.write("                            <input class=\"input-sm\" type=\"file\" name=\"file\"/>\n");
      out.write("                            <input class=\"input-sm textbox\" type=\"text\" name=\"url\" placeholder=\"URL\"/>\n");
      out.write("                            <input type=\"hidden\" name=\"ns\"/>\n");
      out.write("                            <a class=\"btn btn-sm btn-success\" href=\"javascript:void(0);\" onclick=\"document.getElementById('form3').ns.value = document.getElementById('form1').ns.value;\n");
      out.write("                                    document.getElementById('form3').submit();\">Upload</a>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <div class=\"panel-heading\">\n");
      out.write("                    <h3 class=\"panel-title\">\n");
      out.write("                        <a data-toggle=\"collapse\" data-target=\"#collapseA\" href=\"javascript:void(0);\">WSDL Info.</a>\n");
      out.write("                    </h3>\n");
      out.write("                </div>\n");
      out.write("                <div id=\"collapseA\" class=\"panel-collapse collapse in\">\n");
      out.write("                    <div class=\"panel-body\">\n");
      out.write("                        ");

                            String sparql = "";
                            if (request.getParameter("wsdl") != null) {
                                String wsdl = request.getParameter("wsdl");
                                String ontons = request.getParameter("ns");
                                String xsns = "http://www.w3.org/2001/XMLSchema";
                                try {
                                    //WSDL read
                                    WSDLFactory factory = WSDLFactory.newInstance();
                                    WSDLReader reader = factory.newWSDLReader();
                                    reader.setFeature("javax.wsdl.verbose", true);
                                    reader.setFeature("javax.wsdl.importDocuments", true);
                                    Definition def = reader.readWSDL(null, request.getParameter("wsdl"));
                                    String dfns = "";

                                    //Schema read
                                    HashMap<QName, Node> semap = new HashMap<QName, Node>();
                                    HashMap<QName, Node> scmap = new HashMap<QName, Node>();
                                    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(request.getParameter("wsdl"));
                                    NodeList nds = doc.getElementsByTagName(def.getPrefix(xsns) + ":schema");
                                    for (int i = 0; i < nds.getLength(); i++) {
                                        Node nd = nds.item(i);
                                        String tgns = nd.getAttributes().getNamedItem("targetNamespace").getNodeValue();
                                        if (nd.getAttributes().getNamedItem("xmlns") != null) {
                                            dfns = nd.getAttributes().getNamedItem("xmlns").getNodeValue();
                                        }
                                        NodeList nds2 = nd.getChildNodes();
                                        for (int j = 0; j < nds2.getLength(); j++) {
                                            Node nd2 = nds2.item(j);
                                            if (nd2.getNodeType() == 1) {
                                                if (nd2.getNodeName().equals(def.getPrefix(xsns) + ":element")) {
                                                    semap.put(new QName(tgns, nd2.getAttributes().getNamedItem("name").getNodeValue()), nd2);
                                                } else if (nd2.getNodeName().equals(def.getPrefix(xsns) + ":complexType")) {
                                                    scmap.put(new QName(tgns, nd2.getAttributes().getNamedItem("name").getNodeValue()), nd2);
                                                } else if (nd2.getNodeName().equals(def.getPrefix(xsns) + ":import")) {
                                                    String locate = nd2.getAttributes().getNamedItem("schemaLocation").getNodeValue();
                                                    String ins = nd2.getAttributes().getNamedItem("namespace").getNodeValue();
                                                    importSchema(semap, scmap, xsns, locate, ins);
                                                }
                                            }
                                        }
                                    }
                                    /*Iterator<Entry<QName, Node>> itx = smap.entrySet().iterator();
                                     while (itx.hasNext()) {
                                     Entry<QName, Node> it = itx.next();
                                     out.print(it + "<br/>");
                                     }*/

                                    Iterator<Entry<QName, ServiceImpl>> services = def.getAllServices().entrySet().iterator();
                                    while (services.hasNext()) {
                                        ServiceImpl s = services.next().getValue();
                                        out.print("-Sname: " + s.getQName() + "<br/>");
                                        Iterator<Entry<QName, PortImpl>> ports = s.getPorts().entrySet().iterator();
                                        while (ports.hasNext()) {
                                            PortImpl p = ports.next().getValue();
                                            if (p.getExtensibilityElements().get(0).getClass().equals(SOAPAddressImpl.class) || p.getExtensibilityElements().get(0).getClass().equals(SOAP12AddressImpl.class)) {
                                                out.print("--Port: " + p.getName() + "<br/>");
                                                Binding b = p.getBinding();
                                                List<BindingOperationImpl> opers = b.getBindingOperations();
                                                for (BindingOperationImpl o : opers) {
                                                    String oper = wsdl + "#" + p.getName() + "_" + o.getName();
													String firstOutput = wsdl + "#" + o.getName();
                                                    out.print("---Operation: " + o.getName() + "<br/>");
                                                    sparql += "<" + oper + "> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <" + ontons + "#AtomicProcess>.\n"
                                                            + "<" + oper + "> <" + ontons + "#wsdlOperation> \"" + o.getName() + "\".\n";
                                                    //input of operation
                                                    Input in = o.getOperation().getInput();
                                                    out.print("----Input: " + in.getMessage().getQName() + "<br/>");
                                                    Iterator<Entry<QName, PartImpl>> ipts = in.getMessage().getParts().entrySet().iterator();
                                                    while (ipts.hasNext()) {
                                                        PartImpl pt = ipts.next().getValue();
                                                        QName partEName = (pt.getElementName() != null) ? pt.getElementName() : pt.getTypeName();
                                                        out.print("-----Part: " + pt.getName() + ":" + partEName + "<br/>");
                                                        Node nd = (pt.getElementName() != null) ? semap.get(pt.getElementName()) : scmap.get(pt.getTypeName());
                                                        if (nd != null) {
                                                            out.print("------Elem: " + nd.getAttributes().getNamedItem("name") + "<br/>");
                                                            NodeList nds0 = nd.getChildNodes();
                                                            String ndstr = nd.getAttributes().getNamedItem("name").getNodeValue();
                                                            if (nd.getAttributes().getNamedItem("type") != null) {
                                                                String ns = (nd.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                                                String ln = (nd.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd.getAttributes().getNamedItem("type").getNodeValue();
                                                                QName qn = new QName(ns, ln);
                                                                nd = scmap.get(qn);
                                                            }
                                                            if (nd != null) {
                                                                out.print(getComplexType(nd, def, dfns, scmap, xsns, 1));
                                                                sparql += getComplexTypeSPARQL(nd, def, dfns, scmap, xsns, ontons, oper, "Input", wsdl);
                                                            }
                                                            if (nd == null && nds0.getLength() == 0) {
                                                                sparql += "<" + oper + "> <" + ontons + "#hasInput> <" + wsdl + "#" + ndstr + ">.\n"
                                                                        + "<" + wsdl + "#" + ndstr + "> <" + ontons + "#parameterType> <" + wsdl + "#" + ndstr + ">.\n"
                                                                        + "<" + wsdl + "#" + ndstr + "> <" + ontons + "#wsdlMessagePart> \"" + ndstr + "\".\n";
                                                            }
                                                            for (int i = 0; i < nds0.getLength(); i++) {
                                                                Node nd1 = nds0.item(i);
                                                                if (nd1.getNodeType() == 1) {
                                                                    NodeList nds2 = nd1.getChildNodes();
                                                                    for (int j = 0; j < nds2.getLength(); j++) {
                                                                        Node nd2 = nds2.item(j);
                                                                        if (nd2.getNodeType() == 1) {
                                                                            NodeList nds3 = nd2.getChildNodes();
                                                                            for (int k = 0; k < nds3.getLength(); k++) {
                                                                                Node nd3 = nds3.item(k);
                                                                                if (nd3.getNodeType() == 1 && nd3.getNodeName().equals(def.getPrefix(xsns) + ":element")) {
                                                                                    out.print("-------Elem: " + nd3.getAttributes().getNamedItem("name") + ":" + nd3.getAttributes().getNamedItem("type") + "<br/>");
                                                                                    nd = null;
                                                                                    if (nd3.getAttributes().getNamedItem("type") != null) {
                                                                                        String ns = (nd3.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd3.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                                                                        String ln = (nd3.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd3.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd3.getAttributes().getNamedItem("type").getNodeValue();
                                                                                        QName qn = new QName(ns, ln);
                                                                                        nd = scmap.get(qn);
                                                                                    }
                                                                                    if (nd != null) {
                                                                                        out.print(getComplexType(nd, def, dfns, scmap, xsns, 1));
                                                                                        sparql += getComplexTypeSPARQL(nd, def, dfns, scmap, xsns, ontons, oper, "Input", wsdl);
                                                                                    } else {
                                                                                        sparql += "<" + oper + "> <" + ontons + "#hasInput> <" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                                                                + "<" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#parameterType> <" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                                                                + "<" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#wsdlMessagePart> \"" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "\".\n";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            sparql += "<" + oper + "> <" + ontons + "#hasInput> <" + wsdl + "#" + pt.getName() + ">.\n"
                                                                    + "<" + wsdl + "#" + pt.getName() + "> <" + ontons + "#parameterClassType> <" + wsdl + "#" + pt.getName() + ">.\n"
                                                                    + "<" + wsdl + "#" + pt.getName() + "> <" + ontons + "#wsdlMessagePart> \"" + pt.getName() + "\".\n";
                                                        }
                                                    }
                                                    //output of operation
                                                    Output ou = o.getOperation().getOutput();
                                                    out.print("----Output: " + ou.getMessage().getQName() + "<br/>");
                                                    Iterator<Entry<QName, PartImpl>> opts = ou.getMessage().getParts().entrySet().iterator();
                                                    while (opts.hasNext()) {
                                                        PartImpl pt = opts.next().getValue();
                                                        QName partEName = (pt.getElementName() != null) ? pt.getElementName() : pt.getTypeName();
                                                        out.print("-----Part: " + pt.getName() + ":" + partEName + "<br/>");
                                                        Node nd = (pt.getElementName() != null) ? semap.get(pt.getElementName()) : scmap.get(pt.getTypeName());
                                                        if (nd != null) {
                                                            out.print("------Elem: " + nd.getAttributes().getNamedItem("name") + "<br/>");
                                                            NodeList nds0 = nd.getChildNodes();
                                                            String ndstr = nd.getAttributes().getNamedItem("name").getNodeValue();
                                                            if (nd.getAttributes().getNamedItem("type") != null) {
                                                                String ns = (nd.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                                                String ln = (nd.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd.getAttributes().getNamedItem("type").getNodeValue();
                                                                QName qn = new QName(ns, ln);
                                                                nd = scmap.get(qn);
                                                            }
                                                            if (nd != null) {
                                                                out.print(getComplexType(nd, def, dfns, scmap, xsns, 1));
                                                                sparql += getComplexTypeSPARQL(nd, def, dfns, scmap, xsns, ontons, oper, "Output", wsdl);
                                                            }
                                                            if (nd == null && nds0.getLength() == 0) {
                                                                sparql += "<" + oper + "> <" + ontons + "#hasOutput> <" + wsdl + "#" + ndstr + ">.\n"
                                                                        + "<" + wsdl + "#" + ndstr + "> <" + ontons + "#parameterType> <" + wsdl + "#" + ndstr + ">.\n"
                                                                        + "<" + wsdl + "#" + ndstr + "> <" + ontons + "#wsdlMessagePart> \"" + ndstr + "\".\n";
                                                            }
                                                            for (int i = 0; i < nds0.getLength(); i++) {
                                                                Node nd1 = nds0.item(i);
                                                                if (nd1.getNodeType() == 1) {
                                                                    NodeList nds2 = nd1.getChildNodes();
                                                                    for (int j = 0; j < nds2.getLength(); j++) {
                                                                        Node nd2 = nds2.item(j);
                                                                        if (nd2.getNodeType() == 1) {
                                                                            NodeList nds3 = nd2.getChildNodes();
                                                                            for (int k = 0; k < nds3.getLength(); k++) {
                                                                                Node nd3 = nds3.item(k);
                                                                                if (nd3.getNodeType() == 1 && nd3.getNodeName().equals(def.getPrefix(xsns) + ":element")) {
                                                                                    out.print("-------Elem: " + nd3.getAttributes().getNamedItem("name") + ":" + nd3.getAttributes().getNamedItem("type") + "<br/>");
                                                                                    nd = null;
                                                                                    if (nd3.getAttributes().getNamedItem("type") != null) {
                                                                                        String ns = (nd3.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? def.getNamespace(nd3.getAttributes().getNamedItem("type").getNodeValue().split(":")[0]) : dfns;
                                                                                        String ln = (nd3.getAttributes().getNamedItem("type").getNodeValue().contains(":")) ? nd3.getAttributes().getNamedItem("type").getNodeValue().split(":")[1] : nd3.getAttributes().getNamedItem("type").getNodeValue();
                                                                                        QName qn = new QName(ns, ln);
                                                                                        nd = scmap.get(qn);
                                                                                    }
                                                                                    if (nd != null) {
                                                                                        out.print(getComplexType(nd, def, dfns, scmap, xsns, 1));
                                                                                        sparql += getComplexTypeSPARQL(nd, def, dfns, scmap, xsns, ontons, oper, "Output", wsdl);
                                                                                    } else {
                                                                                        sparql += "<" + oper + "> <" + ontons + "#hasOutput> <" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                                                                + "<" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#parameterType> <" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + ">.\n"
                                                                                                + "<" + wsdl + "#" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "> <" + ontons + "#wsdlMessagePart> \"" + nd3.getAttributes().getNamedItem("name").getNodeValue() + "\".\n";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            sparql += "<" + oper + "> <" + ontons + "#hasOutput> <" + wsdl + "#" + pt.getName() + ">.\n"
                                                                    + "<" + wsdl + "#" + pt.getName() + "> <" + ontons + "#parameterClassType> <" + wsdl + "#" + pt.getName() + ">.\n"
                                                                    + "<" + wsdl + "#" + pt.getName() + "> <" + ontons + "#wsdlMessagePart> \"" + pt.getName() + "\".\n";
                                                        }
                                                    }
													sparql += "<" + oper + "> <" + ontons + "#hasOutput> <" + firstOutput + ">.\n";
                                                }
                                            }
                                        }
                                    }
                                } catch (WSDLException e) {
                                    e.printStackTrace(System.out);
                                }
                            }
                            sparql = "INSERT DATA {\n" + sparql + "}";
                        
      out.write("\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <div class=\"panel-heading\">\n");
      out.write("                    <h3 class=\"panel-title\">SPARQL</h3>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"panel-body\">\n");
      out.write("                    <form id=\"form2\" action=\"submitService.jsp\" method=\"post\">\n");
      out.write("                        <input type=\"hidden\" name=\"ns\" value=\"");
      out.print(request.getParameter("ns"));
      out.write("\"/>\n");
      out.write("                        <input type=\"hidden\" name=\"action\" value=\"add\"/>\n");
      out.write("                        <textarea class=\"textbox\" name=\"sparql\" value=\"\" rows=\"15\">");
      out.print(sparql);
      out.write("</textarea>\n");
      out.write("                    </form>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <a class=\"btn btn-lg btn-success\" href=\"javascript:void(0);\" onclick=\"document.getElementById('form2').submit();\">Submit</a>\n");
      out.write("        </div>\n");
      out.write("        <script type=\"text/javascript\" src=\"../js/libs/jquery/jquery.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../js/libs/bootstrap-3.2.0-dist/js/bootstrap.min.js\"></script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
